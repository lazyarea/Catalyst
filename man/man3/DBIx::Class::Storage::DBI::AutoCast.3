.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Storage::DBI::AutoCast 3"
.TH DBIx::Class::Storage::DBI::AutoCast 3 "2014-10-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Storage::DBI::AutoCast \- Storage component for RDBMS requiring explicit placeholder typing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  $schema\->storage\->auto_cast(1);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In some combinations of \s-1RDBMS\s0 and \s-1DBD\s0 drivers (e.g. FreeTDS and Sybase)
statements with values bound to columns or conditions that are not strings will
throw implicit type conversion errors.
.PP
As long as a column data_type is
defined and resolves to a base \s-1RDBMS\s0 native type via
_native_data_type as
defined in your Storage driver, the placeholder for this column will be
converted to:
.PP
.Vb 1
\&  CAST(? as $mapped_type)
.Ve
.PP
This option can also be enabled in
connect_info as:
.PP
.Vb 1
\&  on_connect_call => [\*(Aqset_auto_cast\*(Aq]
.Ve
.SS "connect_call_set_auto_cast"
.IX Subsection "connect_call_set_auto_cast"
Executes:
.PP
.Vb 1
\&  $schema\->storage\->auto_cast(1);
.Ve
.PP
on connection.
.PP
Used as:
.PP
.Vb 1
\&    on_connect_call => [\*(Aqset_auto_cast\*(Aq]
.Ve
.PP
in connect_info.
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional \s-1DBIC\s0 resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (\s-1DBIC\s0) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.

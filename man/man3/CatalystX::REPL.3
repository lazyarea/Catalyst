.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "CatalystX::REPL 3"
.TH CatalystX::REPL 3 "2009-08-11" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CatalystX::REPL \- read\-eval\-print\-loop for debugging your Catalyst application
.SH "VERSION"
.IX Header "VERSION"
version 0.04
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyApp;
\&
\&    use Moose;
\&
\&    # Requires Catalyst 5.8 series
\&    extends \*(AqCatalyst\*(Aq;
\&    with \*(AqCatalystX::REPL\*(Aq;
\&
\&    _\|_PACKAGE_\|_\->setup(qw/\-Debug/);
\&
\&    1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Using Carp::REPL with a Catalyst application is hard. That's
because of all the internal exceptions that are being thrown and caught by
Catalyst during application startup. You'd have to manually skip over all of
those.
.PP
This role works around that by automatically setting up Carp::REPL after
starting your application, if the \f(CW\*(C`CATALYST_REPL\*(C'\fR or \f(CW\*(C`MYAPP_REPL\*(C'\fR environment
variables are set:
.PP
.Vb 3
\& MYAPP_REPL=1 ./script/myapp_server.pl
\& # Hit an action
\& ...
\&
\& 42 at lib/MyApp/Controller/Foo.pm line 8.
\&
\& # instead of exiting, you get a REPL!
\& Trace begun at lib/MyApp/Controller/Foo.pm line 8
\& MyApp::Controller::Foo::bar(\*(AqMyApp::Controller::Foo=HASH(0xc9fe20)\*(Aq, \*(AqMyApp=HASH(0xcea6a4)\*(Aq) called at ...
\& ... # Many more lines of stack trace
\&
\& $ $c
\& MyApp=HASH(0xcea6ec)
\& $ $c\->req\->uri
\& http://localhost/foo/bar
\& $
.Ve
.PP
Options like \f(CW\*(C`warn\*(C'\fR or \f(CW\*(C`nodie\*(C'\fR can be passed to Carp::REPL by putting them,
seperated by commas, into the environment variable:
.PP
.Vb 1
\& MYAPP_REPL=warn,nodie ./script/myapp_server.pl
.Ve
.PP
Carp::REPL uses Devel::REPL for the shell, so direct any questions how how
to use or customize the repl at that module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Carp::REPL
.PP
Devel::REPL
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 3
\&  Tomas Doran <bobtfish@bobtfish.net>
\&  Florian Ragwitz <rafl@debian.org>
\&  Ash Berlin <ash@cpan.org>
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2009 by Florian Ragwitz.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

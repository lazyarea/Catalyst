.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "MooseX::Types::Path::Class 3"
.TH MooseX::Types::Path::Class 3 "2012-03-29" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Types::Path::Class \- A Path::Class type library for Moose
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  package MyClass;
\&  use Moose;
\&  use MooseX::Types::Path::Class;
\&  with \*(AqMooseX::Getopt\*(Aq;  # optional
\&
\&  has \*(Aqdir\*(Aq => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => \*(AqPath::Class::Dir\*(Aq,
\&      required => 1,
\&      coerce   => 1,
\&  );
\&
\&  has \*(Aqfile\*(Aq => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => \*(AqPath::Class::File\*(Aq,
\&      required => 1,
\&      coerce   => 1,
\&  );
\&
\&  # these attributes are coerced to the
\&  # appropriate Path::Class objects
\&  MyClass\->new( dir => \*(Aq/some/directory/\*(Aq, file => \*(Aq/some/file\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MooseX::Types::Path::Class creates common Moose types,
coercions and option specifications useful for dealing
with Path::Class objects as Moose attributes.
.PP
Coercions (see Moose::Util::TypeConstraints) are made
from both 'Str' and 'ArrayRef' to both Path::Class::Dir and
Path::Class::File objects.  If you have MooseX::Getopt installed,
the Getopt option type (\*(L"=s\*(R") will be added for both
Path::Class::Dir and Path::Class::File.
.SH "EXPORTS"
.IX Header "EXPORTS"
None of these are exported by default.  They are provided via
MooseX::Types.
.IP "Dir, File" 4
.IX Item "Dir, File"
These exports can be used instead of the full class names.  Example:
.Sp
.Vb 3
\&  package MyClass;
\&  use Moose;
\&  use MooseX::Types::Path::Class qw(Dir File);
\&
\&  has \*(Aqdir\*(Aq => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => Dir,
\&      required => 1,
\&      coerce   => 1,
\&  );
\&
\&  has \*(Aqfile\*(Aq => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => File,
\&      required => 1,
\&      coerce   => 1,
\&  );
.Ve
.Sp
Note that there are no quotes around Dir or File.
.IP "is_Dir($value), is_File($value)" 4
.IX Item "is_Dir($value), is_File($value)"
Returns true or false based on whether \f(CW$value\fR is a valid Dir or File.
.IP "to_Dir($value), to_File($value)" 4
.IX Item "to_Dir($value), to_File($value)"
Attempts to coerce \f(CW$value\fR to a Dir or File.  Returns the coerced value
or false if the coercion failed.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MooseX::Types::Path::Class::MoreCoercions, MooseX::FileAttribute, MooseX::Types::URI
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Moose, MooseX::Types, Path::Class
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
If you find a bug please either email the author, or add
the bug to cpan-RT <http://rt.cpan.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Todd Hepler  \f(CW\*(C`<thepler@employees.org>\*(C'\fR
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007\-2012, Todd Hepler \f(CW\*(C`<thepler@employees.org>\*(C'\fR.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.

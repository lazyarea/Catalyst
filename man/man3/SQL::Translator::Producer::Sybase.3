.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Producer::Sybase 3"
.TH SQL::Translator::Producer::Sybase 3 "2014-06-28" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Translator::Producer::Sybase \- Sybase producer for SQL::Translator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use SQL::Translator;
\&
\&  my $t = SQL::Translator\->new( parser => \*(Aq...\*(Aq, producer => \*(AqSybase\*(Aq );
\&  $t\->translate;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module will produce text output of the schema suitable for Sybase.
.SH "Sybase Create Table Syntax"
.IX Header "Sybase Create Table Syntax"
.Vb 6
\&  CREATE [ [ LOCAL ] { TEMPORARY | TEMP } ] TABLE table_name (
\&      { column_name data_type [ DEFAULT default_expr ] [ column_constraint [, ... ] ]
\&      | table_constraint }  [, ... ]
\&  )
\&  [ INHERITS ( parent_table [, ... ] ) ]
\&  [ WITH OIDS | WITHOUT OIDS ]
.Ve
.PP
where column_constraint is:
.PP
.Vb 6
\&  [ CONSTRAINT constraint_name ]
\&  { NOT NULL | NULL | UNIQUE | PRIMARY KEY |
\&    CHECK (expression) |
\&    REFERENCES reftable [ ( refcolumn ) ] [ MATCH FULL | MATCH PARTIAL ]
\&      [ ON DELETE action ] [ ON UPDATE action ] }
\&  [ DEFERRABLE | NOT DEFERRABLE ] [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ]
.Ve
.PP
and table_constraint is:
.PP
.Vb 7
\&  [ CONSTRAINT constraint_name ]
\&  { UNIQUE ( column_name [, ... ] ) |
\&    PRIMARY KEY ( column_name [, ... ] ) |
\&    CHECK ( expression ) |
\&    FOREIGN KEY ( column_name [, ... ] ) REFERENCES reftable [ ( refcolumn [, ... ] ) ]
\&      [ MATCH FULL | MATCH PARTIAL ] [ ON DELETE action ] [ ON UPDATE action ] }
\&  [ DEFERRABLE | NOT DEFERRABLE ] [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ]
.Ve
.SH "Create Index Syntax"
.IX Header "Create Index Syntax"
.Vb 6
\&  CREATE [ UNIQUE ] INDEX index_name ON table
\&      [ USING acc_method ] ( column [ ops_name ] [, ...] )
\&      [ WHERE predicate ]
\&  CREATE [ UNIQUE ] INDEX index_name ON table
\&      [ USING acc_method ] ( func_name( column [, ... ]) [ ops_name ] )
\&      [ WHERE predicate ]
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SQL::Translator.
.SH "AUTHORS"
.IX Header "AUTHORS"
Sam Angiuoli <angiuoli@users.sourceforge.net>,
Paul Harrington <harringp@deshaw.com>,
Ken Youens-Clark <kclark@cpan.org>.

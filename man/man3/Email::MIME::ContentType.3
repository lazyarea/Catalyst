.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Email::MIME::ContentType 3"
.TH Email::MIME::ContentType 3 "2013-08-11" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Email::MIME::ContentType \- Parse a MIME Content\-Type Header
.SH "VERSION"
.IX Header "VERSION"
version 1.017
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Email::MIME::ContentType;
\&
\&  # Content\-Type: text/plain; charset="us\-ascii"; format=flowed
\&  my $ct = \*(Aqtext/plain; charset="us\-ascii"; format=flowed\*(Aq;
\&  my $data = parse_content_type($ct);
\&
\&  $data = {
\&    type       => "text",
\&    subtype    => "plain",
\&    attributes => {
\&      charset => "us\-ascii",
\&      format  => "flowed"
\&    }
\&  };
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "parse_content_type"
.IX Subsection "parse_content_type"
This routine is exported by default.
.PP
This routine parses email content type headers according to section 5.1 of \s-1RFC\s0
2045. It returns a hash as above, with entries for the type, the subtype, and a
hash of attributes.
.PP
For backward compatibility with a really unfortunate misunderstanding of \s-1RFC\s0
2045 by the early implementors of this module, \f(CW\*(C`discrete\*(C'\fR and \f(CW\*(C`composite\*(C'\fR are
also present in the returned hashref, with the values of \f(CW\*(C`type\*(C'\fR and \f(CW\*(C`subtype\*(C'\fR
respectively.
.SH "WARNINGS"
.IX Header "WARNINGS"
This is not a valid content-type header, according to both \s-1RFC\s0 1521 and \s-1RFC\s0
2045:
.PP
.Vb 1
\&  Content\-Type: type/subtype;
.Ve
.PP
If a semicolon appears, a parameter must.  \f(CW\*(C`parse_content_type\*(C'\fR will carp if
it encounters a header of this type, but you can suppress this by setting
\&\f(CW$Email::MIME::ContentType::STRICT_PARAMS\fR to a false value.  Please consider
localizing this assignment!
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Simon Cozens <simon@cpan.org>
.IP "\(bu" 4
Casey West <casey@geeknest.com>
.IP "\(bu" 4
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Simon Cozens.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

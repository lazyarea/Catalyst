.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::DispatchType::Index 3"
.TH Catalyst::DispatchType::Index 3 "2014-09-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::DispatchType::Index \- Index DispatchType
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See Catalyst::DispatchType.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dispatch type managing behaviour for index pages.  For more information on
dispatch types, see:
.IP "\(bu" 4
Catalyst::Manual::Intro for how they affect application authors
.IP "\(bu" 4
Catalyst::DispatchType for implementation information.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$self\->match( $c, $path )"
.el .SS "\f(CW$self\fP\->match( \f(CW$c\fP, \f(CW$path\fP )"
.IX Subsection "$self->match( $c, $path )"
Check if there's an index action for a given path, and set it up to use it
if there is; only matches a full \s-1URI\s0 \- if \f(CW$c\fR\->req\->args is already set
this DispatchType is guaranteed not to match.
.ie n .SS "$self\->register( $c, $action )"
.el .SS "\f(CW$self\fP\->register( \f(CW$c\fP, \f(CW$action\fP )"
.IX Subsection "$self->register( $c, $action )"
Register an action with this DispatchType.
.ie n .SS "$self\->uri_for_action( $action, $captures )"
.el .SS "\f(CW$self\fP\->uri_for_action( \f(CW$action\fP, \f(CW$captures\fP )"
.IX Subsection "$self->uri_for_action( $action, $captures )"
get a \s-1URI\s0 part for an action; always returns undef is \f(CW$captures\fR is set
since index actions don't have captures
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify it under
the same terms as Perl itself.

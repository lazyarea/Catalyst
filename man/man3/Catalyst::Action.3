.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::Action 3"
.TH Catalyst::Action 3 "2014-09-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Action \- Catalyst Action
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    <form action="[%c.uri_for(c.action)%]">
\&
\&    $c\->forward( $action\->private_path );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class represents a Catalyst Action. You can access the object for the
currently dispatched action via \f(CW$c\fR\->action. See the Catalyst::Dispatcher
for more information on how actions are dispatched. Actions are defined in
Catalyst::Controller subclasses.
.SH "METHODS"
.IX Header "METHODS"
.SS "attributes"
.IX Subsection "attributes"
The sub attributes that are set for this action, like Local, Path, Private
and so on. This determines how the action is dispatched to.
.SS "class"
.IX Subsection "class"
Returns the name of the component where this action is defined.
Derived by calling the catalyst_component_name
method on each component.
.SS "code"
.IX Subsection "code"
Returns a code reference to this action.
.ie n .SS "dispatch( $c )"
.el .SS "dispatch( \f(CW$c\fP )"
.IX Subsection "dispatch( $c )"
Dispatch this action against a context.
.ie n .SS "execute( $controller, $c, @args )"
.el .SS "execute( \f(CW$controller\fP, \f(CW$c\fP, \f(CW@args\fP )"
.IX Subsection "execute( $controller, $c, @args )"
Execute this action's coderef against a given controller with a given
context and arguments
.ie n .SS "match( $c )"
.el .SS "match( \f(CW$c\fP )"
.IX Subsection "match( $c )"
Check Args attribute, and makes sure number of args matches the setting.
Always returns true if Args is omitted.
.ie n .SS "match_captures ($c, $captures)"
.el .SS "match_captures ($c, \f(CW$captures\fP)"
.IX Subsection "match_captures ($c, $captures)"
Can be implemented by action class and action role authors. If the method
exists, then it will be called with the request context and an array reference
of the captures for this action.
.PP
Returning true from this method causes the chain match to continue, returning
makes the chain not match (and alternate, less preferred chains will be attempted).
.SS "compare"
.IX Subsection "compare"
Compares 2 actions based on the value of the \f(CW\*(C`Args\*(C'\fR attribute, with no \f(CW\*(C`Args\*(C'\fR
having the highest precedence.
.SS "namespace"
.IX Subsection "namespace"
Returns the private namespace this action lives in.
.SS "reverse"
.IX Subsection "reverse"
Returns the private path for this action.
.SS "private_path"
.IX Subsection "private_path"
Returns absolute private path for this action. Unlike \f(CW\*(C`reverse\*(C'\fR, the
\&\f(CW\*(C`private_path\*(C'\fR of an action is always suitable for passing to \f(CW\*(C`forward\*(C'\fR.
.SS "name"
.IX Subsection "name"
Returns the sub name of this action.
.SS "number_of_args"
.IX Subsection "number_of_args"
Returns the number of args this action expects. This is 0 if the action doesn't take any arguments and undef if it will take any number of arguments.
.SS "number_of_captures"
.IX Subsection "number_of_captures"
Returns the number of captures this action expects for Chained actions.
.SS "list_extra_info"
.IX Subsection "list_extra_info"
A HashRef of key-values that an action can provide to a debugging screen
.SS "meta"
.IX Subsection "meta"
Provided by Moose.
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify it under
the same terms as Perl itself.

.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::Action::DeserializeMultiPart 3"
.TH Catalyst::Action::DeserializeMultiPart 3 "2014-10-24" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Action::DeserializeMultiPart \- Deserialize Data in a Multipart Request
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package Foo::Controller::Bar;
\&
\&    _\|_PACKAGE_\|_\->config(
\&        # see Catalyst::Action::Deserialize for standard config
\&    );
\&
\&    sub begin :ActionClass(\*(AqDeserializeMultiPart\*(Aq) DeserializePart(\*(AqREST\*(Aq) {}
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This action will deserialize multipart \s-1HTTP\s0 \s-1POST\s0, \s-1PUT\s0, \s-1OPTIONS\s0 and \s-1DELETE\s0
requests.  It is a simple extension of Catalyst::Action::Deserialize
with the exception that rather than using the entire request body (which
may contain multiple sections), it will look for a single part in the request
body named according to the \f(CW\*(C`DeserializePart\*(C'\fR attribute on that action
(defaulting to \f(CW\*(C`REST\*(C'\fR).  If a part is found under that name, it then
proceeds to deserialize the request as normal based on the content-type
of that individual part.  If no such part is found, the request would
be processed as if no data was sent.
.PP
This module's code will only come into play if the following conditions are met:
.IP "\(bu" 4
The \f(CW\*(C`Content\-type\*(C'\fR of the request is \f(CW\*(C`multipart/*\*(C'\fR
.IP "\(bu" 4
The request body (as returned by \f(CW\*(C`$c\-\*(C'\fRrequest\->body> is not defined
.IP "\(bu" 4
There is a part of the request body (as returned by \f(CW\*(C`$c\-\*(C'\fRrequest\->upload($DeserializePart)>) available
.SH "CONFIGURING HTTP::Body"
.IX Header "CONFIGURING HTTP::Body"
By default, HTTP::Body parses \f(CW\*(C`multipart/*\*(C'\fR requests as an
HTTP::Body::OctetStream.  HTTP::Body::OctetStream does not separate
out the individual parts of the request body.  In order to make use of
the individual parts, HTTP::Body must be told which content types
to map to HTTP::Body::MultiPart.  This module makes the assumption
that you would like to have all \f(CW\*(C`multipart/mixed\*(C'\fR requests parsed by
HTTP::Body::MultiPart module.  This is done by a package variable
inside HTTP::Body: \f(CW$HTTP::Body::Types\fR (a \s-1HASH\s0 ref).
.PP
\&\fB\s-1WARNING:\s0\fR As this module modifies the behaviour of HTTP::Body globally,
adding it to an application can have unintended consequences as multipart
bodies will be parsed differently from before.
.PP
Feel free to
add other content-types to this hash if needed or if you would prefer
that \f(CW\*(C`multipart/mixed\*(C'\fR \s-1NOT\s0 be added to this hash, simply delete it
after loading this module.
.PP
.Vb 2
\&    # in your controller
\&    use Catalyst::Action::DeserializeMultiPart;
\&
\&    delete $HTTP::Body::Types\->{\*(Aqmultipart/mixed\*(Aq};
\&    $HTTP::Body::Types\->{\*(Aqmultipart/my\-crazy\-content\-type\*(Aq} = \*(AqHTTP::Body::MultiPart\*(Aq;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This is a simple sub-class of Catalyst::Action::Deserialize.
.SH "AUTHORS"
.IX Header "AUTHORS"
See Catalyst::Action::REST for authors.
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.

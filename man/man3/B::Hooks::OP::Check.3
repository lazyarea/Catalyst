.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "B::Hooks::OP::Check 3"
.TH B::Hooks::OP::Check 3 "2011-09-11" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
B::Hooks::OP::Check \- Wrap OP check callbacks
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # include "hook_op_check.h"
\&
\&    STATIC OP *my_const_check_op (pTHX_ OP *op, void *user_data) {
\&        /* ... */
\&        return op;
\&    }
\&
\&    STATIC hook_op_check_id my_hook_id = 0;
\&
\&    void
\&    setup ()
\&        CODE:
\&            my_hook_id = hook_op_check (OP_CONST, my_const_check_op, NULL);
\&
\&    void
\&    teardown ()
\&        CODE:
\&            hook_op_check_remove (OP_CONST, my_hook_id);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a c api for \s-1XS\s0 modules to hook into the callbacks of
\&\f(CW\*(C`PL_check\*(C'\fR.
.PP
ExtUtils::Depends is used to export all functions for other \s-1XS\s0 modules to
use. Include the following in your Makefile.PL:
.PP
.Vb 5
\&    my $pkg = ExtUtils::Depends\->new(\*(AqYour::XSModule\*(Aq, \*(AqB::Hooks::OP::Check\*(Aq);
\&    WriteMakefile(
\&        ... # your normal makefile flags
\&        $pkg\->get_makefile_vars,
\&    );
.Ve
.PP
Your \s-1XS\s0 module can now include \f(CW\*(C`hook_op_check.h\*(C'\fR.
.SH "TYPES"
.IX Header "TYPES"
.SS "typedef \s-1OP\s0 *(*hook_op_check_cb) (pTHX_ \s-1OP\s0 *, void *);"
.IX Subsection "typedef OP *(*hook_op_check_cb) (pTHX_ OP *, void *);"
Type that callbacks need to implement.
.SS "typedef \s-1UV\s0 hook_op_check_id"
.IX Subsection "typedef UV hook_op_check_id"
Type to identify a callback.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "hook_op_check_id hook_op_check (opcode type, hook_op_check_cb cb, void *user_data)"
.IX Subsection "hook_op_check_id hook_op_check (opcode type, hook_op_check_cb cb, void *user_data)"
Register the callback \f(CW\*(C`cb\*(C'\fR to be called after the \f(CW\*(C`PL_check\*(C'\fR function for
opcodes of the given \f(CW\*(C`type\*(C'\fR. \f(CW\*(C`user_data\*(C'\fR will be passed to the callback as
the last argument. Returns an id that can be used to remove the callback later
on.
.SS "void *hook_op_check_remove (opcode type, hook_op_check_id id)"
.IX Subsection "void *hook_op_check_remove (opcode type, hook_op_check_id id)"
Remove the callback identified by \f(CW\*(C`id\*(C'\fR. Returns the userdata the callback had.
.SH "AUTHOR"
.IX Header "AUTHOR"
Florian Ragwitz <rafl@debian.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2008 Florian Ragwitz
.PP
This module is free software.
.PP
You may distribute this code under the same terms as Perl itself.

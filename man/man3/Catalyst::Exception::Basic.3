.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::Exception::Basic 3"
.TH Catalyst::Exception::Basic 3 "2014-09-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Exception::Basic \- Basic Catalyst Exception Role
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   package My::Exception;
\&   use Moose;
\&   use namespace::clean \-except => \*(Aqmeta\*(Aq;
\&
\&   with \*(AqCatalyst::Exception::Basic\*(Aq;
\&
\&   # Elsewhere..
\&   My::Exception\->throw( qq/Fatal exception/ );
.Ve
.PP
See also Catalyst and Catalyst::Exception.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the basic Catalyst Exception role which implements all of
Catalyst::Exception::Interface.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "message"
.IX Subsection "message"
Holds the exception message.
.SH "METHODS"
.IX Header "METHODS"
.SS "as_string"
.IX Subsection "as_string"
Stringifies the exception's message attribute.
Called when the object is stringified by overloading.
.ie n .SS "throw( $message )"
.el .SS "throw( \f(CW$message\fP )"
.IX Subsection "throw( $message )"
.ie n .SS "throw( message => $message )"
.el .SS "throw( message => \f(CW$message\fP )"
.IX Subsection "throw( message => $message )"
.ie n .SS "throw( error => $error )"
.el .SS "throw( error => \f(CW$error\fP )"
.IX Subsection "throw( error => $error )"
Throws a fatal exception.
.ie n .SS "rethrow( $exception )"
.el .SS "rethrow( \f(CW$exception\fP )"
.IX Subsection "rethrow( $exception )"
Rethrows a caught exception.
.SS "meta"
.IX Subsection "meta"
Provided by Moose
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.

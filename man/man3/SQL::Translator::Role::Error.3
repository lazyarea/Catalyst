.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Role::Error 3"
.TH SQL::Translator::Role::Error 3 "2014-06-28" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Translator::Role::Error \- Error setter/getter for objects and classes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In the class consuming the role:
.PP
.Vb 3
\&    package Foo;
\&    use Moo;
\&    with qw(SQL::Translator::Role::Error);
\&
\&    sub foo {
\&        ...
\&        return $self\->error("Something failed")
\&            unless $some_condition;
\&        ...
\&    }
.Ve
.PP
In code using the class:
.PP
.Vb 3
\&    Foo\->foo or die Foo\->error;
\&    # or
\&    $foo\->foo or die $foo\->error;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This Moo::Role provides a method for getting and setting error on a
class or object.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$object_or_class\->error([$message])"
.el .SS "\f(CW$object_or_class\fP\->error([$message])"
.IX Subsection "$object_or_class->error([$message])"
If called with an argument, sets the error message and returns undef,
otherwise returns the message.
.PP
As an implementation detail, for compatibility with Class::Base, the
message is stored in \f(CW\*(C`$object\->{_ERROR}\*(C'\fR or \f(CW$Class::ERROR\fR,
depending on whether the invocant is an object.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
\&\*(L"Error Handling\*(R" in Class::Base

.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::Action::REST::ForBrowsers 3"
.TH Catalyst::Action::REST::ForBrowsers 3 "2014-10-24" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Action::REST::ForBrowsers \- Automated REST Method Dispatching that Accommodates Browsers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    sub foo :Local :ActionClass(\*(AqREST::ForBrowsers\*(Aq) {
\&      ... do setup for HTTP method specific handlers ...
\&    }
\&
\&    sub foo_GET : Private {
\&      ... do something for GET requests ...
\&    }
\&
\&    sub foo_GET_html : Private {
\&      ... do something for GET requests from browsers ...
\&    }
\&
\&    sub foo_PUT : Private {
\&      ... do something for PUT requests ...
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class subclasses Catalyst::Action::REST to add an additional
dispatching hook. If the request is a \s-1GET\s0 request \fIand\fR the request looks
like it comes from a browser, it tries to dispatch to a \f(CW\*(C`GET_html\*(C'\fR method
before trying to the \f(CW\*(C`GET\*(C'\fR method instead. All other \s-1HTTP\s0 methods are
dispatched in the same way.
.PP
For example, in the synopsis above, calling \s-1GET\s0 on \*(L"/foo\*(R" from a browser will
end up calling the \f(CW\*(C`foo_GET_html\*(C'\fR method. If the request is \fInot\fR from a
browser, it will call \f(CW\*(C`foo_GET\*(C'\fR.
.PP
See Catalyst::Action::REST for more details on dispatching details.
.SH "METHODS"
.IX Header "METHODS"
.IP "dispatch" 4
.IX Item "dispatch"
This method overrides the default dispatch mechanism to the re-dispatching
mechanism described above.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
You likely want to look at Catalyst::Controller::REST, which implements a
sensible set of defaults for a controller doing \s-1REST\s0.
.PP
This class automatically adds the
Catalyst::TraitFor::Request::REST::ForBrowsers role to your request class.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright the above named \s-1AUTHOR\s0 and \s-1CONTRIBUTORS\s0
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.

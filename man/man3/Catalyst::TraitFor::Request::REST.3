.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::TraitFor::Request::REST 3"
.TH Catalyst::TraitFor::Request::REST 3 "2014-10-24" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::TraitFor::Request::REST \- A role to apply to Catalyst::Request giving it REST methods and attributes.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&     if ( $c\->request\->accepts(\*(Aqapplication/json\*(Aq) ) {
\&         ...
\&     }
\&
\&     my $types = $c\->request\->accepted_content_types();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a Moose::Role applied to Catalyst::Request that adds a few
methods to the request object to facilitate writing REST-y code.
Currently, these methods are all related to the content types accepted by
the client.
.SH "METHODS"
.IX Header "METHODS"
.IP "data" 4
.IX Item "data"
If the request went through the Deserializer action, this method will
return the deserialized data structure.
.IP "accepted_content_types" 4
.IX Item "accepted_content_types"
Returns an array reference of content types accepted by the
client.
.Sp
The list of types is created by looking at the following sources:
.RS 4
.IP "\(bu" 8
Content-type header
.Sp
If this exists, this will always be the first type in the list.
.IP "\(bu" 8
content-type parameter
.Sp
If the request is a \s-1GET\s0 request and there is a \*(L"content-type\*(R"
parameter in the query string, this will come before any types in the
Accept header.
.IP "\(bu" 8
Accept header
.Sp
This will be parsed and the types found will be ordered by the
relative quality specified for each type.
.RE
.RS 4
.Sp
If a type appears in more than one of these places, it is ordered based on
where it is first found.
.RE
.IP "preferred_content_type" 4
.IX Item "preferred_content_type"
This returns the first content type found. It is shorthand for:
.Sp
.Vb 1
\&  $request\->accepted_content_types\->[0]
.Ve
.IP "accepts($type)" 4
.IX Item "accepts($type)"
Given a content type, this returns true if the type is accepted.
.Sp
Note that this does not do any wildcard expansion of types.
.SH "AUTHORS"
.IX Header "AUTHORS"
See Catalyst::Action::REST for authors.
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.

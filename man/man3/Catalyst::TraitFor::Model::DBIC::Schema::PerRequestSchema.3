.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::TraitFor::Model::DBIC::Schema::PerRequestSchema 3"
.TH Catalyst::TraitFor::Model::DBIC::Schema::PerRequestSchema 3 "2012-08-15" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::TraitFor::Model::DBIC::Schema::PerRequestSchema \- Clone the schema
with attributes for each requests
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    _\|_PACKAGE_\|_\->config({
\&        traits => [\*(AqPerRequestSchema\*(Aq],
\&    });
\&
\&    sub per_request_schema_attributes {
\&        my ($self, $c) = @_;
\&        return (restricting_object => $c\->user\->obj);
\&    }
\&    ### OR ###
\&    sub per_request_schema {
\&        my ($self, $c) = @_;
\&        return $self\->schema\->schema_method($c\->user\->obj)
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Clones the schema for each new request with the attributes retrieved from your
\&\f(CW\*(C`per_request_schema_attributes\*(C'\fR method, which you must implement. This method
is passed the context.
.PP
Alternatively, you could also override the \f(CW\*(C`per_request_schema\*(C'\fR method if you
need access to the schema clone and/or need to separate out the Model/Schema
methods.  (See examples above and the defaults in the code.)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst::Model::DBIC::Schema, DBIx::Class::Schema
.SH "AUTHOR"
.IX Header "AUTHOR"
See \*(L"\s-1AUTHOR\s0\*(R" in Catalyst::Model::DBIC::Schema and
\&\*(L"\s-1CONTRIBUTORS\s0\*(R" in Catalyst::Model::DBIC::Schema.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
See \*(L"\s-1COPYRIGHT\s0\*(R" in Catalyst::Model::DBIC::Schema.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software, you can redistribute it and/or modify it
under the same terms as Perl itself.

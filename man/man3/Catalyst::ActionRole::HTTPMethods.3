.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::ActionRole::HTTPMethods 3"
.TH Catalyst::ActionRole::HTTPMethods 3 "2014-09-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::ActionRole::HTTPMethods \- Match on HTTP Methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyApp::Web::Controller::MyController;
\&
\&    use Moose;
\&    use MooseX::MethodAttributes;
\&
\&    extends \*(AqCatalyst::Controller\*(Aq;
\&
\&    sub user_base : Chained(\*(Aq/\*(Aq) CaptureArg(0) { ... }
\&
\&      sub get_user    : Chained(\*(Aquser_base\*(Aq) Args(1) GET { ... }
\&      sub post_user   : Chained(\*(Aquser_base\*(Aq) Args(1) POST { ... }
\&      sub put_user    : Chained(\*(Aquser_base\*(Aq) Args(1) PUT { ... }
\&      sub delete_user : Chained(\*(Aquser_base\*(Aq) Args(1) DELETE { ... }
\&      sub head_user   : Chained(\*(Aquser_base\*(Aq) Args(1) HEAD { ... }
\&      sub option_user : Chained(\*(Aquser_base\*(Aq) Args(1) OPTION { ... }
\&      sub option_user : Chained(\*(Aquser_base\*(Aq) Args(1) PATCH { ... }
\&
\&
\&      sub post_and_put : Chained(\*(Aquser_base\*(Aq) POST PUT Args(1) { ... }
\&      sub method_attr  : Chained(\*(Aquser_base\*(Aq) Method(\*(AqDELETE\*(Aq) Args(0) { ... }
\&
\&    _\|_PACKAGE_\|_\->meta\->make_immutable;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an action role that lets your Catalyst::Action match on standard
\&\s-1HTTP\s0 methods, such as \s-1GET\s0, \s-1POST\s0, etc.
.PP
Since most web browsers have limited support for rich \s-1HTTP\s0 Method vocabularies
we use Plack::Middleware::MethodOverride which allows you to 'tunnel' your
request method over \s-1POST\s0  This works in two ways.  You can set an extension
\&\s-1HTTP\s0 header \f(CW\*(C`X\-HTTP\-Method\-Override\*(C'\fR which will contain the value of the
desired request method, or you may set a search query parameter
\&\f(CW\*(C`x\-tunneled\-method\*(C'\fR.  Remember, these only work over \s-1HTTP\s0 Request type
\&\s-1POST\s0.  See Plack::Middleware::MethodOverride for more.
.SH "REQUIRES"
.IX Header "REQUIRES"
This role requires the following methods in the consuming class.
.SS "match"
.IX Subsection "match"
.SS "match_captures"
.IX Subsection "match_captures"
Returns 1 if the action matches the existing request and zero if not.
.SH "METHODS"
.IX Header "METHODS"
This role defines the following methods
.SS "match"
.IX Subsection "match"
.SS "match_captures"
.IX Subsection "match_captures"
Around method modifier that return 1 if the request method matches one of the
allowed methods (see \*(L"http_methods\*(R") and zero otherwise.
.SS "allowed_http_methods"
.IX Subsection "allowed_http_methods"
An array of strings that are the allowed http methods for matching this action
normalized as noted above (using X\-Method* overrides).
.SS "list_extra_info"
.IX Subsection "list_extra_info"
Adds a key => [@values] \*(L"\s-1HTTP_METHODS\s0\*(R" whose value is an ArrayRef of sorted
allowed methods to the \->list_extra_info HashRef.  This is used primarily for
debugging output.
.SS "_has_expected_http_method ($expected)"
.IX Subsection "_has_expected_http_method ($expected)"
Private method which returns 1 if \f(CW$expected\fR matches one of the allowed
in \*(L"http_methods\*(R" and zero otherwise.
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify it under
the same terms as Perl itself.

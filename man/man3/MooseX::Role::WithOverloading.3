.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "MooseX::Role::WithOverloading 3"
.TH MooseX::Role::WithOverloading 3 "2014-11-16" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Role::WithOverloading \- Roles which support overloading
.SH "VERSION"
.IX Header "VERSION"
version 0.16
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package MyRole;
\&    use MooseX::Role::WithOverloading;
\&
\&    use overload
\&        q{""}    => \*(Aqas_string\*(Aq,
\&        fallback => 1;
\&
\&    has message => (
\&        is       => \*(Aqrw\*(Aq,
\&        isa      => \*(AqStr\*(Aq,
\&    );
\&
\&    sub as_string { shift\->message }
\&
\&    package MyClass;
\&    use Moose;
\&    use namespace::autoclean;
\&
\&    with \*(AqMyRole\*(Aq;
\&
\&    package main;
\&
\&    my $i = MyClass\->new( message => \*(Aqfoobar\*(Aq );
\&    print $i; # Prints \*(Aqfoobar\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MooseX::Role::WithOverloading allows you to write a Moose::Role which
defines overloaded operators and allows those overload methods to be
composed into the classes/roles/instances it's compiled to, where plain
Moose::Roles would lose the overloading.
.PP
Starting with Moose version 2.1300, this module is no longer necessary, as
the functionality is available already. In that case,
\&\f(CW\*(C`use MooseX::Role::WithOverloading\*(C'\fR behaves identically to \f(CW\*(C`use Moose::Role\*(C'\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Tomas Doran <bobtfish@bobtfish.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2009 by Florian Ragwitz.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Tomas Doran (t0m) <t0m@state51.co.uk>

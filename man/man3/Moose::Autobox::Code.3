.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Moose::Autobox::Code 3"
.TH Moose::Autobox::Code 3 "2013-10-28" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Autobox::Code \- the Code role
.SH "SYNOPOSIS"
.IX Header "SYNOPOSIS"
.Vb 1
\&  use Moose::Autobox;
\&  
\&  my $adder = sub { $_[0] + $_[1] };
\&  my $add_2 = $adder\->curry(2);
\&  
\&  $add_2\->(2); # returns 4
\&  
\&  # create a recursive subroutine 
\&  # using the Y combinator
\&  *factorial = sub {
\&      my $f = shift;
\&      sub {
\&          my $n = shift;
\&          return 1 if $n < 2;
\&          return $n * $f\->($n \- 1);
\&      }
\&  }\->y;
\&  
\&  factorial(10) # returns 3628800
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a role to describe operations on the Code type.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBcurry (@values)\fR" 4
.IX Item "curry (@values)"
.PD 0
.IP "\fBrcurry (@values)\fR" 4
.IX Item "rcurry (@values)"
.IP "\fBconjoin (\e&sub)\fR" 4
.IX Item "conjoin (&sub)"
.IP "\fBdisjoin (\e&sub)\fR" 4
.IX Item "disjoin (&sub)"
.IP "\fBcompose (@subs)\fR" 4
.IX Item "compose (@subs)"
.PD
This will take a list of \f(CW@subs\fR and compose them all into a single 
subroutine where the output of one sub will be the input of another.
.IP "\fBy\fR" 4
.IX Item "y"
This implements the Y combinator.
.IP "\fBu\fR" 4
.IX Item "u"
This implements the U combinator.
.IP "\fBmeta\fR" 4
.IX Item "meta"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.PD 0
.IP "<http://en.wikipedia.org/wiki/Fixed_point_combinator>" 4
.IX Item "<http://en.wikipedia.org/wiki/Fixed_point_combinator>"
.IP "http://blade.nagaokaut.ac.jp/cgi\-bin/scat.rb/ruby/ruby\-talk/20469 <http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/20469>" 4
.IX Item "http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/20469 <http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/20469>"
.PD
.SH "BUGS"
.IX Header "BUGS"
All complex software has bugs lurking in it, and this module is no 
exception. If you find a bug please either email me, or add the bug
to cpan-RT.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stevan Little <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2006\-2008 by Infinity Interactive, Inc.
.PP
<http://www.iinteractive.com>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

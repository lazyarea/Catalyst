.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::ScriptRunner 3"
.TH Catalyst::ScriptRunner 3 "2014-09-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::ScriptRunner \- The Catalyst Framework script runner
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # Will run MyApp::Script::Server if it exists, otherwise
\&    # will run Catalyst::Script::Server.
\&    Catalyst::ScriptRunner\->run(\*(AqMyApp\*(Aq, \*(AqServer\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is responsible for loading and running scripts, either in the
application specific namespace
(e.g. \f(CW\*(C`MyApp::Script::Server\*(C'\fR), or the Catalyst namespace (e.g. \f(CW\*(C`Catalyst::Script::Server\*(C'\fR).
.PP
If your application contains a custom script, then it will be used in preference to the generic
script, and is expected to sub-class the standard script.
.SH "TRAIT LOADING"
.IX Header "TRAIT LOADING"
Catalyst will automatically load and apply roles to the scripts in your
application.
.PP
\&\f(CW\*(C`MyApp::TraitFor::Script\*(C'\fR will be loaded if present, and will be applied to \fB\s-1ALL\s0\fR
scripts.
.PP
\&\f(CW\*(C`MyApp::TraitFor::Script::XXXX\*(C'\fR will be loaded (if present) and for script
individually.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "run ($application_class, $scriptclass)"
.el .SS "run ($application_class, \f(CW$scriptclass\fP)"
.IX Subsection "run ($application_class, $scriptclass)"
Called with two parameters, the application class (e.g. MyApp)
and the script class, (i.e. one of Server/FastCGI/CGI/Create/Test)
.ie n .SS "find_script_class ($appname, $script_name)"
.el .SS "find_script_class ($appname, \f(CW$script_name\fP)"
.IX Subsection "find_script_class ($appname, $script_name)"
Finds and loads the class for the script, trying the application specific
script first, and falling back to the generic script. Returns the script
which was loaded.
.ie n .SS "find_script_traits ($appname, @try)"
.el .SS "find_script_traits ($appname, \f(CW@try\fP)"
.IX Subsection "find_script_traits ($appname, @try)"
Finds and loads a set of traits. Returns the list of traits which were loaded.
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify it under
the same terms as Perl itself.

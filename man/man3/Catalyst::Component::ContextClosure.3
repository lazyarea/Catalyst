.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::Component::ContextClosure 3"
.TH Catalyst::Component::ContextClosure 3 "2014-09-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Component::ContextClosure \- Moose Role for components which need to close over the $ctx, without leaking
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    package MyApp::Controller::Foo;
\&    use Moose;
\&    use namespace::clean \-except => \*(Aqmeta\*(Aq;
\&    BEGIN {
\&        extends \*(AqCatalyst::Controller\*(Aq;
\&        with \*(AqCatalyst::Component::ContextClosure\*(Aq;
\&    }
\&
\&    sub some_action : Local {
\&        my ($self, $ctx) = @_;
\&        $ctx\->stash(a_closure => $self\->make_context_closure(sub {
\&            my ($ctx) = @_;
\&            $ctx\->response\->body(\*(Aqbody set from closure\*(Aq);
\&        }, $ctx));
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A common problem with stashing a closure, that closes over the Catalyst context
(often called \f(CW$ctx\fR or \f(CW$c\fR), is the circular reference it creates, as the
closure holds onto a reference to context, and the context holds a reference to
the closure in its stash. This creates a memory leak, unless you always
carefully weaken the closures context reference.
.PP
This role provides a convenience method to create closures, that closes over
\&\f(CW$ctx\fR.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "make_context_closure ($closure, $ctx)"
.el .SS "make_context_closure ($closure, \f(CW$ctx\fP)"
.IX Subsection "make_context_closure ($closure, $ctx)"
Returns a code reference, that will invoke \f(CW$closure\fR with a weakened
reference to \f(CW$ctx\fR. All other parameters to the returned code reference will
be passed along to \f(CW$closure\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst::Component
.PP
Catalyst::Controller
.PP
CatalystX::LeakChecker
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify it under
the same terms as Perl itself.

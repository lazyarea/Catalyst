.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::Authentication::User 3"
.TH Catalyst::Authentication::User 3 "2012-06-30" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Authentication::User \- Base class for user objects.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package MyStore::User;
\&    use base qw/Catalyst::Authentication::User/;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base class for authentication user objects.
.PP
\&\s-1THIS\s0 \s-1IS\s0 \s-1NOT\s0 A \s-1COMPLETE\s0 \s-1CLASS\s0! it is intended to provide base functionality only.
.PP
It provides the base methods listed below, and any additional methods
are proxied onto the user object fetched from the underlieing store.
.SH "NOTES TO STORE IMPLEMENTORS"
.IX Header "NOTES TO STORE IMPLEMENTORS"
Please read the comments in the source code of this class to work out
which methods you should override.
.SH "METHODS"
.IX Header "METHODS"
.SS "id( )"
.IX Subsection "id( )"
A unique \s-1ID\s0 by which a user can be retrieved from the store.
.SS "store( )"
.IX Subsection "store( )"
Should return a class name that can be used to refetch the user using it's
\&\s-1ID\s0.
.SS "supports( )"
.IX Subsection "supports( )"
An introspection method used to determine what features a user object has, to support credential and authorization plugins.
.ie n .SS "get( $field )"
.el .SS "get( \f(CW$field\fP )"
.IX Subsection "get( $field )"
Returns the value for the \f(CW$field\fR provided.
.SS "get_object( )"
.IX Subsection "get_object( )"
Returns the underlying object storing the user data.  The return value of this
method will vary depending
on the storage module used.
.SS "obj( )"
.IX Subsection "obj( )"
Shorthand for get_object( )
.SS "\s-1AUTOLOAD\s0"
.IX Subsection "AUTOLOAD"
Delegates any unknown methods onto the user object returned by \->obj

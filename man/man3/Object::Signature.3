.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Object::Signature 3"
.TH Object::Signature 3 "2011-03-24" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Object::Signature \- Generate cryptographic signatures for objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # In your module
\&  package My::Module
\&  use base \*(AqObject::Signature\*(Aq;
\&  
\&  # In outside code
\&  my $Object = My::Module\->new;  
\&  print "Object Signature: " . $Object\->signature;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Object::Signature is an abstract base class that you can inherit from in
order to allow your objects to generate unique cryptographic signatures.
.PP
The method used to generate the signature is based on Storable and
Digest::MD5. The object is fed to \f(CW\*(C`Storable::nfreeze\*(C'\fR to get a string,
which is then passed to Digest::MD5::md5_hex to get a unique 32
character hexidecimal signature.
.SH "METHODS"
.IX Header "METHODS"
.SS "signature"
.IX Subsection "signature"
The \f(CW\*(C`signature\*(C'\fR method is the only method added to your class, and will
generate a unique 32 hexidecimal signature for any object it is called on.
.SH "SUPPORT"
.IX Header "SUPPORT"
All bugs should be filed via the bug tracker at
.PP
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Object\-Signature <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Object-Signature>
.PP
For other issues, or commercial enhancement or support, contact the author.
.SH "TO DO"
.IX Header "TO DO"
.SS "Incremental Generation"
.IX Subsection "Incremental Generation"
Currently has to generate the entire Storable string before digesting
it. Would be nice if there was a way to incrementally Storablise and Digest
in one pass so that it becomes much more memory efficient for large objects.
.SS "Strengthen the Digest Algorithm"
.IX Subsection "Strengthen the Digest Algorithm"
Once the current (as of 2005) hashing controversy settles down, consider
selecting a newer and more powerful hashing algorithm to replace \s-1MD5\s0. Or
offer alternatives depending on how important the security situation is,
as \s-1MD5\s0 is \fBvery\fR fast (90 meg a second) and many more-secure ones are a
lot slower (more than 10 times slower in some cases).
.PP
On our side is the fact we use Storable. It should be \fBmuch\fR harder to create
collisions when you don't control the string, only the structure \fBbefore\fR
it goes through Storable.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Object::Signature::File, <http://ali.as/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2004 \- 2011 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.

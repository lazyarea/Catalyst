.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Net::EmptyPort 3"
.TH Net::EmptyPort 3 "2014-07-01" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::EmptyPort \- find a free TCP/UDP port
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::EmptyPort qw(empty_port check_port);
\&
\&    # get a random free port
\&    my $port = empty_port();
\&
\&    # check if a port is already used
\&    if (check_port(5000)) {
\&        say "Port 5000 already in use";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::EmptyPort helps finding an empty \s-1TCP/UDP\s0 port.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """empty_port()""" 4
.el .IP "\f(CWempty_port()\fR" 4
.IX Item "empty_port()"
.Vb 1
\&    my $port = empty_port();
.Ve
.Sp
Get the available port number, you can use.
.Sp
Normally, \fIempty_port()\fR finds empty port number from 49152..65535.
See http://www.iana.org/assignments/port\-numbers <http://www.iana.org/assignments/port-numbers>
.Sp
But you want to use another range, use a following form:
.Sp
.Vb 2
\&    # 5963..65535
\&    my $port = empty_port(5963);
.Ve
.Sp
You can also find an empty \s-1UDP\s0 port by specifying the protocol as
the second parameter:
.Sp
.Vb 3
\&    my $port = empty_port(1024, \*(Aqudp\*(Aq);
\&    # use 49152..65535 range
\&    my $port = empty_port(undef, \*(Aqudp\*(Aq);
.Ve
.ie n .IP """check_port($port:Int)""" 4
.el .IP "\f(CWcheck_port($port:Int)\fR" 4
.IX Item "check_port($port:Int)"
.Vb 1
\&    my $true_or_false = check_port(5000);
.Ve
.Sp
Checks if the given port is already in use. Returns true if it is in use (i.e. if the port is \s-1NOT\s0 free). Returns false if the port is free.
.Sp
Also works for \s-1UDP:\s0
.Sp
.Vb 1
\&    my $true_or_false = check_port(5000, \*(Aqudp\*(Aq);
.Ve
.ie n .IP """wait_port($port:Int[, $max_wait:Number,$proto:String])""" 4
.el .IP "\f(CWwait_port($port:Int[, $max_wait:Number,$proto:String])\fR" 4
.IX Item "wait_port($port:Int[, $max_wait:Number,$proto:String])"
Waits for a particular port is available for connect.
.Sp
This method waits the \f(CW$port\fR number is ready to accept a request.
.Sp
\&\f(CW$port\fR is a port number to check.
.Sp
Sleep up to \f(CW$max_wait\fR seconds (10 seconds by default) for checking the
port. Pass negative \f(CW$max_wait\fR value to wait infinitely.
.Sp
\&\fIReturn value\fR : Return true if the port is available, false otherwise.
.Sp
\&\fBIncompatible changes\fR: Before 2.0, \f(CW\*(C`wait_port($port:Int[, $sleep:Number, $retry:Int, $proto:String])\*(C'\fR is a signature.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tokuhiro Matsuno <tokuhirom@gmail.com>
.SH "THANKS TO"
.IX Header "THANKS TO"
kazuhooku
.PP
dragon3
.PP
charsbar
.PP
Tatsuhiko Miyagawa
.PP
lestrrat
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::ActionContainer 3"
.TH Catalyst::ActionContainer 3 "2014-09-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::ActionContainer \- Catalyst Action Container
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See Catalyst.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a container for actions. The dispatcher sets up a tree of these
to represent the various dispatch points in your application.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new(\e%data | $part)"
.el .SS "new(\e%data | \f(CW$part\fP)"
.IX Subsection "new(%data | $part)"
Can be called with { part => \f(CW$part\fR, actions => \e%actions } for full
construction or with just a part, which will result in an empty actions
hashref to be populated via add_action later
.SS "get_action($name)"
.IX Subsection "get_action($name)"
Returns an action from this container based on the action name, or undef
.ie n .SS "add_action($action, [ $name ])"
.el .SS "add_action($action, [ \f(CW$name\fP ])"
.IX Subsection "add_action($action, [ $name ])"
Adds an action, optionally providing a name to override \f(CW$action\fR\->name
.SS "actions"
.IX Subsection "actions"
Accessor to the actions hashref, containing all actions in this container.
.SS "part"
.IX Subsection "part"
Accessor to the path part this container resolves to. Also what the container
stringifies to.
.SS "meta"
.IX Subsection "meta"
Provided by Moose
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify it under
the same terms as Perl itself.

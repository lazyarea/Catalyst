.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::Restarter 3"
.TH Catalyst::Restarter 3 "2013-05-14" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Restarter \- Uses File::ChangeNotify to check for changed files and restart the server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $class = Catalyst::Restarter\->pick_subclass;
\&
\&    my $restarter = $class\->new(
\&        directories => \*(Aq/path/to/MyApp\*(Aq,
\&        regex       => \*(Aq\e.yml$|\e.yaml$|\e.conf|\e.pm$\*(Aq,
\&        start_sub => sub { ... }
\&    );
\&
\&    $restarter\->run_and_watch;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base class for all restarters, and it also provide
functionality for picking an appropriate restarter subclass for a
given platform.
.PP
This class uses File::ChangeNotify to watch one or more directories
of files and restart the Catalyst server when any of those files
changes.
.SH "METHODS"
.IX Header "METHODS"
.SS "pick_subclass"
.IX Subsection "pick_subclass"
Returns the name of an appropriate subclass for the given platform.
.SS "new ( start_sub => sub { ... }, ... )"
.IX Subsection "new ( start_sub => sub { ... }, ... )"
This method creates a new restarter object, but should be called on a
subclass, not this class.
.PP
The \*(L"start_sub\*(R" argument is required. This is a subroutine reference
that can be used to start the Catalyst server.
.SS "run_and_watch"
.IX Subsection "run_and_watch"
This method forks, starts the server in a child process, and then
watched for changed files in the parent. When files change, it kills
the child, forks again, and starts a new server.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst, File::ChangeNotify
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.

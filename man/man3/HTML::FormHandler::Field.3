.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "HTML::FormHandler::Field 3"
.TH HTML::FormHandler::Field 3 "2014-08-02" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::FormHandler::Field \- base class for fields
.SH "VERSION"
.IX Header "VERSION"
version 0.40057
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Instances of Field subclasses are generally built by HTML::FormHandler
from 'has_field' declarations or the field_list, but they can also be constructed
using new for test purposes (since there's no standard way to add a field to a form
after construction).
.PP
.Vb 2
\&    use HTML::FormHandler::Field::Text;
\&    my $field = HTML::FormHandler::Field::Text\->new( name => $name, ... );
.Ve
.PP
In your custom field class:
.PP
.Vb 3
\&    package MyApp::Field::MyText;
\&    use HTML::FormHandler::Moose;
\&    extends \*(AqHTML::FormHandler::Field::Text\*(Aq;
\&
\&    has \*(Aqmy_attribute\*(Aq => ( isa => \*(AqStr\*(Aq, is => \*(Aqrw\*(Aq );
\&
\&    apply [ { transform => sub { ... } },
\&            { check => [\*(Aqfighter\*(Aq, \*(Aqbard\*(Aq, \*(Aqmage\*(Aq ], message => \*(Aq....\*(Aq }
\&          ];
\&    1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base class for form fields. The 'type' of a field class
is used in the FormHandler field_list or has_field to identify which field class to
load from the 'field_name_space' (or directly, when prefixed with '+').
If the type is not specified, it defaults to Text.
.PP
See HTML::FormHandler::Manual::Fields for a list of the fields and brief
descriptions of their structure.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "Names, types, accessor"
.IX Subsection "Names, types, accessor"
.IP "name" 4
.IX Item "name"
The name of the field. Used in the \s-1HTML\s0 form. Often a db accessor.
The only required attribute.
.IP "type" 4
.IX Item "type"
The class or type of the field. The 'type' of HTML::FormHandler::Field::Money
is 'Money'. Classes that you define yourself are prefixed with '+'.
.IP "accessor" 4
.IX Item "accessor"
If the name of your field is different than your database accessor, use
this attribute to provide the accessor.
.IP "full_name" 4
.IX Item "full_name"
The name of the field with all parents:
.Sp
.Vb 1
\&   \*(Aqevent.start_date.month\*(Aq
.Ve
.IP "full_accessor" 4
.IX Item "full_accessor"
The field accessor with all parents.
.IP "html_name" 4
.IX Item "html_name"
The full_name plus the form name if 'html_prefix' is set.
.IP "input_param" 4
.IX Item "input_param"
By default we expect an input parameter based on the field name.  This allows
you to look for a different input parameter.
.SS "Field data"
.IX Subsection "Field data"
.IP "inactive, is_inactive, is_active" 4
.IX Item "inactive, is_inactive, is_active"
Set the 'inactive' attribute to 1 if this field is inactive. The 'inactive' attribute
that isn't set or is set to 0 will make a field 'active'.
This provides a way to define fields in the form and selectively set them to inactive.
There is also an '_active' attribute, for internal use to indicate that the field has
been activated/inactivated on 'process' by the form's 'active'/'inactive' attributes.
.Sp
You can use the is_inactive and is_active methods to check whether this particular
field is active.
.Sp
.Vb 1
\&   if( $form\->field(\*(Aqfoo\*(Aq)\->is_active ) { ... }
.Ve
.IP "input" 4
.IX Item "input"
The input string from the parameters passed in.
.IP "value" 4
.IX Item "value"
The value as it would come from or go into the database, after being
acted on by inflations/deflations and transforms. Used to construct the
\&\f(CW\*(C`$form\->values\*(C'\fR hash. Validation and constraints act on 'value'.
.Sp
See also HTML::FormHandler::Manual::InflationDeflation.
.IP "fif" 4
.IX Item "fif"
Values used to fill in the form. Read only. Use a deflation to get
from 'value' to 'fif' if an inflator was used. Use 'fif_from_value'
attribute if you want to use the field 'value' to fill in the form.
.Sp
.Vb 1
\&   [% form.field(\*(Aqtitle\*(Aq).fif %]
.Ve
.IP "init_value" 4
.IX Item "init_value"
Initial value populated by init_from_object. You can tell if a field
has changed by comparing 'init_value' and 'value'. Read only.
.IP "input_without_param" 4
.IX Item "input_without_param"
Input for this field if there is no param. Set by default for Checkbox,
and Select, since an unchecked checkbox or unselected pulldown
does not return a parameter.
.SS "Form, parent"
.IX Subsection "Form, parent"
.IP "form" 4
.IX Item "form"
A reference to the containing form.
.IP "parent" 4
.IX Item "parent"
A reference to the parent of this field. Compound fields are the
parents for the fields they contain.
.SS "Errors"
.IX Subsection "Errors"
.IP "errors" 4
.IX Item "errors"
Returns the error list for the field. Also provides 'num_errors',
\&'has_errors', 'push_errors' and 'clear_errors' from Array
trait. Use 'add_error' to add an error to the array if you
want to use a MakeText language handle. Default is an empty list.
.IP "add_error" 4
.IX Item "add_error"
Add an error to the list of errors. Error message will be localized
using '_localize' method.
See also HTML::FormHandler::TraitFor::I18N.
.Sp
.Vb 1
\&    return $field\->add_error( \*(Aqbad data\*(Aq ) if $bad;
.Ve
.IP "error_fields" 4
.IX Item "error_fields"
Compound fields will have an array of errors from the subfields.
.IP "localize_meth" 4
.IX Item "localize_meth"
Set the method used to localize.
.SS "Attributes for creating \s-1HTML\s0"
.IX Subsection "Attributes for creating HTML"
The 'element_attr' hashref attribute can be used to set
arbitrary \s-1HTML\s0 attributes on a field's input tag.
.PP
.Vb 1
\&   has_field \*(Aqfoo\*(Aq => ( element_attr => { readonly => 1, my_attr => \*(Aqabc\*(Aq } );
.Ve
.PP
Note that the 'id' and 'type' attributes are not set using element_attr. Use
the field's 'id' attribute (or 'build_id_method') to set the id.
.PP
The 'label_attr' hashref is for label attributes, and the 'wrapper_attr'
is for attributes on the wrapping element (a 'div' for the standard 'simple'
wrapper).
.PP
A 'javascript' key in one of the '_attr' hashes will be inserted into the
element as-is.
.PP
The following are used in rendering \s-1HTML\s0, but are handled specially.
.PP
.Vb 9
\&   label       \- Text label for this field. Defaults to ucfirst field name.
\&   build_label_method \- coderef for constructing the label
\&   wrap_label_method \- coderef for constructing a wrapped label
\&   id          \- Useful for javascript (default is html_name. to prefix with
\&                 form name, use \*(Aqhtml_prefix\*(Aq in your form)
\&   build_id_method \- coderef for constructing the id
\&   render_filter \- Coderef for filtering fields before rendering. By default
\&                 changes >, <, &, " to the html entities
\&   disabled    \- Boolean to set field disabled
.Ve
.PP
The order attribute may be used to set the order in which fields are rendered.
.PP
.Vb 2
\&   order       \- Used for sorting errors and fields. Built automatically,
\&                 but may also be explicitly set
.Ve
.PP
The following are discouraged. Use 'element_attr', 'label_attr', and 'wrapper_attr'
instead.
.PP
.Vb 4
\&   title       \- instead use element_attr => { title => \*(Aq...\*(Aq }
\&   style       \- instead use element_attr => { style => \*(Aq...\*(Aq }
\&   tabindex    \- instead use element_attr => { tabindex => 1 }
\&   readonly    \- instead use element_attr => { readonly => \*(Aqreadonly\*(Aq }
.Ve
.PP
Rendering of the various \s-1HTML\s0 attributes is done by calling the 'process_attrs'
function (from HTML::FormHandler::Render::Util) and passing in a method that
adds in error classes, provides backward compatibility with the deprecated
attributes, etc.
.PP
.Vb 6
\&    attribute hashref  class attribute        wrapping method
\&    =================  =================      ================
\&    element_attr       element_class          element_attributes
\&    label_attr         label_class            label_attributes
\&    wrapper_attr       wrapper_class          wrapper_attributes
\&                       element_wrapper_class  element_wrapper_attributes
.Ve
.PP
('element_wrapper' is for an inner div around the input element, not
including the label. Used for Bootstrap3 rendering, but also available
in the Simple wrapper.)
The slots for the class attributes are arrayrefs; they will coerce a
string into an arrayref.
In addition, these 'wrapping methods' call a hook method in the form class,
\&'html_attributes', which you can use to customize and localize the various
attributes. (Field types: 'element', 'wrapper', 'label')
.PP
.Vb 5
\&   sub html_attributes {
\&       my ( $self, $field, $type, $attr ) = @_;
\&       $attr\->{class} = \*(Aqlabel\*(Aq if $type eq \*(Aqlabel\*(Aq;
\&       return $attr;
\&   }
.Ve
.PP
The 'process_attrs' function will also handle an array of strings, such as for the
\&'class' attribute.
.SS "tags"
.IX Subsection "tags"
A hashref containing flags and strings for use in the rendering code.
The value of a tag can be a string, a coderef (accessed as a method on the
field) or a block specified with a percent followed by the blockname
('%blockname').
.PP
Retrieve a tag with 'get_tag'. It returns a '' if the tag doesn't exist.
.PP
This attribute used to be named 'widget_tags', which is deprecated.
.SS "html5_type_attr [string]"
.IX Subsection "html5_type_attr [string]"
This string is used when rendering an input element as the value for the type attribute.
It is used when the form has the is_html5 flag on.
.SS "widget"
.IX Subsection "widget"
The 'widget' attribute is used in rendering, so if you are
not using FormHandler's rendering facility, you don't need this
attribute.  It is used in generating \s-1HTML\s0, in templates and the
rendering roles. Fields of different type can use the same widget.
.PP
This attribute is set in the field classes, or in the fields
defined in the form. If you want a new widget type, create a
widget role, such as MyApp::Form::Widget::Field::MyWidget. Provide
the name space in the 'widget_name_space' attribute, and set
the 'widget' of your field to the package name after the
Field/Form/Wrapper:
.PP
.Vb 1
\&   has_field \*(Aqmy_field\*(Aq => ( widget => \*(AqMyWidget\*(Aq );
.Ve
.PP
If you are using a template based rendering system you will want
to create a widget template.
(see HTML::FormHandler::Manual::Templates)
.PP
Widget types for some of the provided field classes:
.PP
.Vb 10
\&    Widget                 : Field classes
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-:\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    Text                   : Text, Integer
\&    Checkbox               : Checkbox, Boolean
\&    RadioGroup             : Select, Multiple, IntRange (etc)
\&    Select                 : Select, Multiple, IntRange (etc)
\&    CheckboxGroup          : Multiple select
\&    TextArea               : TextArea
\&    Compound               : Compound, Repeatable, DateTime
\&    Password               : Password
\&    Hidden                 : Hidden
\&    Submit                 : Submit
\&    Reset                  : Reset
\&    NoRender               :
\&    Upload                 : Upload
.Ve
.PP
Widget roles are automatically applied to field classes
unless they already have a 'render' method, and if the
\&'no_widgets' flag in the form is not set.
.PP
You can create your own widget roles and specify the namespace
in 'widget_name_space'. In the form:
.PP
.Vb 1
\&    has \*(Aq+widget_name_space\*(Aq => ( default => sub { [\*(AqMyApp::Widget\*(Aq] } );
.Ve
.PP
If you want to use a fully specified role name for a widget, you
can prefix it with a '+':
.PP
.Vb 1
\&   widget => \*(Aq+MyApp::Widget::SomeWidget\*(Aq
.Ve
.PP
For more about widgets, see HTML::FormHandler::Manual::Rendering.
.SS "Flags"
.IX Subsection "Flags"
.Vb 3
\&   password  \- prevents the entered value from being displayed in the form
\&   writeonly \- The initial value is not taken from the database
\&   noupdate  \- Do not update this field in the database (does not appear in $form\->value)
.Ve
.SS "Defaults"
.IX Subsection "Defaults"
See also the documentation on \*(L"Defaults\*(R" in HTML::FormHandler::Manual::Intro.
.IP "default_method, set_default" 4
.IX Item "default_method, set_default"
Supply a coderef (which will be a method on the field) with 'default_method'
or the name of a form method with 'set_default' (which will be a method on
the form). If not specified and a form method with a name of
\&\f(CW\*(C`default_<field_name>\*(C'\fR exists, it will be used.
.IP "default" 4
.IX Item "default"
Provide an initial value just like the 'set_default' method, except in the field
declaration:
.Sp
.Vb 1
\&  has_field \*(Aqbax\*(Aq => ( default => \*(AqDefault bax\*(Aq );
.Ve
.Sp
FormHandler has flipped back and forth a couple of times about whether a default
specified in the has_field definition should override values provided in an
initial item or init_object. Sometimes people want one behavior, and sometimes
the other. Now 'default' does *not* override.
.Sp
If you pass in a model object with \f(CW\*(C`item => $row\*(C'\fR or an initial object
with \f(CW\*(C`init_object => {....}\*(C'\fR the values in that object will be used instead
of values provided in the field definition with 'default' or 'default_fieldname'.
If you want defaults that override or supplement the item/init_object, you can use the form
flags 'use_defaults_over_obj', 'use_init_obj_over_item', and
\&'use_init_obj_when_no_accessor_in_item'.
.Sp
You could also put your defaults into your row or init_object instead.
.IP "default_over_obj" 4
.IX Item "default_over_obj"
This is deprecated; look into using 'use_defaults_over_obj' or 'use_init_obj_over_item'
flags instead. They allow using the standard 'default' attribute.
.Sp
Allows setting defaults which will override values provided with an item/init_object.
(And only those. Will not be used for defaults without an item/init_object.)
.Sp
.Vb 1
\&   has_field \*(Aqquux\*(Aq => ( default_over_obj => \*(Aqdefault quux\*(Aq );
.Ve
.Sp
At this time there is no equivalent of 'set_default', but the type of the attribute
is not defined so you can provide default values in a variety of other ways,
including providing a trait which does 'build_default_over_obj'. For examples,
see tests in the distribution.
.SH "Constraints and Validations"
.IX Header "Constraints and Validations"
See also HTML::FormHandler::Manual::Validation.
.SS "Constraints set in attributes"
.IX Subsection "Constraints set in attributes"
.IP "required" 4
.IX Item "required"
Flag indicating whether this field must have a value
.IP "unique" 4
.IX Item "unique"
For \s-1DB\s0 field \- check for uniqueness. Action is performed by
the \s-1DB\s0 model.
.IP "messages" 4
.IX Item "messages"
.Vb 1
\&    messages => { required => \*(Aq...\*(Aq, unique => \*(Aq...\*(Aq }
.Ve
.Sp
Set messages created by FormHandler by setting in the 'messages'
hashref. Some field subclasses have additional settable messages.
.Sp
required:  Error message text added to errors if required field is not present.
The default is \*(L"Field <field label> is required\*(R".
.IP "range_start" 4
.IX Item "range_start"
.PD 0
.IP "range_end" 4
.IX Item "range_end"
.PD
Field values are validated against the specified range if one
or both of range_start and range_end are set and the field
does not have 'options'.
.Sp
The IntRange field uses this range to create a select list
with a range of integers.
.Sp
In a FormHandler field_list:
.Sp
.Vb 5
\&    age => {
\&        type            => \*(AqInteger\*(Aq,
\&        range_start     => 18,
\&        range_end       => 120,
\&    }
.Ve
.IP "not_nullable" 4
.IX Item "not_nullable"
Fields that contain 'empty' values such as '' are changed to undef in the validation process.
If this flag is set, the value is not changed to undef. If your database column requires
an empty string instead of a null value (such as a \s-1NOT\s0 \s-1NULL\s0 column), set this attribute.
.Sp
.Vb 4
\&    has_field \*(Aqdescription\*(Aq => (
\&        type => \*(AqTextArea\*(Aq,
\&        not_nullable => 1,
\&    );
.Ve
.Sp
This attribute is also used when you want an empty array to stay an empty array and not
be set to undef.
.Sp
It's also used when you have a compound field and you want the 'value' returned
to contain subfields with undef, instead of the whole field to be undef.
.SS "apply"
.IX Subsection "apply"
Use the 'apply' keyword to specify an ArrayRef of constraints and coercions to
be executed on the field at validate_field time.
.PP
.Vb 6
\&   has_field \*(Aqtest\*(Aq => (
\&      apply => [ \*(AqMooseType\*(Aq,
\&                 { check => sub {...}, message => { } },
\&                 { transform => sub { ... lc(shift) ... } }
\&               ],
\&   );
.Ve
.PP
See more documentation in HTML::FormHandler::Manual::Validation.
.SS "trim"
.IX Subsection "trim"
An action to trim the field. By default
this contains a transform to strip beginning and trailing spaces.
Set this attribute to null to skip trimming, or supply a different
transform.
.PP
.Vb 7
\&  trim => { transform => sub {
\&      my $string = shift;
\&      $string =~ s/^\es+//;
\&      $string =~ s/\es+$//;
\&      return $string;
\&  } }
\&  trim => { type => MyTypeConstraint }
.Ve
.PP
Trimming is performed before any other defined actions.
.SS "Inflation/deflation"
.IX Subsection "Inflation/deflation"
There are a number of methods to provide finely tuned inflation and deflation:
.IP "inflate_method" 4
.IX Item "inflate_method"
Inflate to a data format desired for validation.
.IP "deflate_method" 4
.IX Item "deflate_method"
Deflate to a string format for presenting in \s-1HTML\s0.
.IP "inflate_default_method" 4
.IX Item "inflate_default_method"
Modify the 'default' provided by an 'item' or 'init_object'.
.IP "deflate_value_method" 4
.IX Item "deflate_value_method"
Modify the value returned by \f(CW\*(C`$form\->value\*(C'\fR.
.IP "deflation" 4
.IX Item "deflation"
Another way of providing a deflation method.
.IP "transform" 4
.IX Item "transform"
Another way of providing an inflation method.
.PP
Normally if you have a deflation, you will need a matching inflation.
There are two different flavors of inflation/deflation: one for inflating values
to a format needed for validation and deflating for output, the other for
inflating the initial provided values (usually from a database row) and deflating
them for the 'values' returned.
.PP
See HTML::FormHandler::Manual::InflationDeflation.
.SH "Processing and validating the field"
.IX Header "Processing and validating the field"
.SS "validate_field"
.IX Subsection "validate_field"
This is the base class validation routine. Most users will not
do anything with this. It might be useful for method modifiers,
if you want code that executed before or after the validation
process.
.SS "validate"
.IX Subsection "validate"
This field method can be used in addition to or instead of 'apply' actions
in custom field classes.
It should validate the field data and set error messages on
errors with \f(CW\*(C`$field\->add_error\*(C'\fR.
.PP
.Vb 5
\&    sub validate {
\&        my $field = shift;
\&        my $value = $field\->value;
\&        return $field\->add_error( ... ) if ( ... );
\&    }
.Ve
.SS "validate_method, set_validate"
.IX Subsection "validate_method, set_validate"
Supply a coderef (which will be a method on the field) with 'validate_method'
or the name of a form method with 'set_validate' (which will be a method on
the form). If not specified and a form method with a name of
\&\f(CW\*(C`validate_<field_name>\*(C'\fR exists, it will be used.
.PP
Periods in field names will be replaced by underscores, so that the field
\&'addresses.city' will use the 'validate_addresses_city' method for validation.
.PP
.Vb 3
\&   has_field \*(Aqmy_foo\*(Aq => ( validate_method => \e&my_foo_validation );
\&   sub my_foo_validation { ... }
\&   has_field \*(Aqtitle\*(Aq => ( isa => \*(AqStr\*(Aq, set_validate => \*(Aqcheck_title\*(Aq );
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
FormHandler Contributors \- see HTML::FormHandler
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Gerda Shank.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

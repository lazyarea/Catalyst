.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "HTML::FormHandler::Field::Display 3"
.TH HTML::FormHandler::Field::Display 3 "2014-08-02" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::FormHandler::Field::Display \- display only field
.SH "VERSION"
.IX Header "VERSION"
version 0.40057
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This class can be used for fields that are display only. It will
render the value returned by a form's 'html_<field_name>' method,
or the field's 'html' attribute.
.PP
.Vb 2
\&  has_field \*(Aqexplanation\*(Aq => ( type => \*(AqDisplay\*(Aq,
\&     html => \*(Aq<p>This is an explanation...</p>\*(Aq );
.Ve
.PP
or in a form:
.PP
.Vb 10
\&  has_field \*(Aqexplanation\*(Aq => ( type => \*(AqDisplay\*(Aq );
\&  sub html_explanation {
\&     my ( $self, $field ) = @_;
\&     if( $self\->something ) {
\&        return \*(Aq<p>This type of explanation...</p>\*(Aq;
\&     }
\&     else {
\&        return \*(Aq<p>Another type of explanation...</p>\*(Aq;
\&     }
\&  }
\&  #\-\-\-\-
\&  has_field \*(Aqusername\*(Aq => ( type => \*(AqDisplay\*(Aq );
\&  sub html_username {
\&      my ( $self, $field ) = @_;
\&      return \*(Aq<div><b>User:&nbsp;</b>\*(Aq . $field\->value . \*(Aq</div>\*(Aq;
\&  }
.Ve
.PP
or set the name of the rendering method:
.PP
.Vb 4
\&   has_field \*(Aqexplanation\*(Aq => ( type => \*(AqDisplay\*(Aq, set_html => \*(Aqmy_explanation\*(Aq );
\&   sub my_explanation {
\&     ....
\&   }
.Ve
.PP
or provide a 'render_method':
.PP
.Vb 6
\&   has_field \*(Aqmy_button\*(Aq => ( type => \*(AqDisplay\*(Aq, render_method => \e&render_my_button );
\&   sub render_my_button {
\&       my $self = shift;
\&       ....
\&       return \*(Aq...\*(Aq;
\&   }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
FormHandler Contributors \- see HTML::FormHandler
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Gerda Shank.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

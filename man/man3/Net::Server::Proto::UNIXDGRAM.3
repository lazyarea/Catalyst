.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Net::Server::Proto::UNIXDGRAM 3"
.TH Net::Server::Proto::UNIXDGRAM 3 "2014-05-06" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Proto::UNIXDGRAM \- Net::Server UNIXDGRAM protocol.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See Net::Server::Proto.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Protocol module for Net::Server.  This module implements the \s-1UNIX\s0
\&\s-1SOCK_DGRAM\s0 socket type.  See Net::Server::Proto.
.PP
Any sockets created during startup will be chown'ed to the user and
group specified in the starup arguments.
.SH "PARAMETERS"
.IX Header "PARAMETERS"
The following paramaters may be specified in addition to normal
command line parameters for a Net::Server.  See Net::Server for
more information on reading arguments.
.IP "udp_recv_len" 4
.IX Item "udp_recv_len"
Specifies the number of bytes to read from the \s-1SOCK_DGRAM\s0 connection
handle.  Data will be read into \f(CW$self\fR\->{'server'}\->{'udp_data'}.
Default is 4096.  See IO::Socket::INET and recv.
.IP "udp_recv_flags" 4
.IX Item "udp_recv_flags"
See recv.  Default is 0.
.SH "QUICK PARAMETER LIST"
.IX Header "QUICK PARAMETER LIST"
.Vb 1
\&  Key               Value                    Default
\&
\&  ## UNIXDGRAM socket parameters
\&  udp_recv_len      \ed+                      4096
\&  udp_recv_flags    \ed+                      0
.Ve
.SH "LICENCE"
.IX Header "LICENCE"
Distributed under the same terms as Net::Server

.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Email::Sender 3"
.TH Email::Sender 3 "2014-10-11" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Email::Sender \- a library for sending email
.SH "VERSION"
.IX Header "VERSION"
version 1.300016
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  my $message = Email::MIME\->create( ... );
\&  # produce an Email::Abstract compatible message object,
\&  # e.g. produced by Email::Simple, Email::MIME, Email::Stuff
\&
\&  use Email::Sender::Simple qw(sendmail);
\&  use Email::Sender::Transport::SMTP qw();
\&  use Try::Tiny;
\&
\&  try {
\&    sendmail(
\&      $message,
\&      {
\&        from => $SMTP_ENVELOPE_FROM_ADDRESS,
\&        transport => Email::Sender::Transport::SMTP\->new({
\&            host => $SMTP_HOSTNAME,
\&            port => $SMTP_PORT,
\&        })
\&      }
\&    );
\&  } catch {
\&      warn "sending failed: $_";
\&  };
.Ve
.SH "OVERVIEW"
.IX Header "OVERVIEW"
Email::Sender replaces the old and sometimes problematic Email::Send library,
which did a decent job at handling very simple email sending tasks, but was not
suitable for serious use, for a variety of reasons.
.PP
Most users will be able to use Email::Sender::Simple to send mail.  Users
with more specific needs should look at the available Email::Sender::Transport
classes.
.PP
Documentation may be found in Email::Sender::Manual, and new users should
start with Email::Sender::Manual::QuickStart.
.SH "IMPLEMENTING"
.IX Header "IMPLEMENTING"
Email::Sender itself is a Moo role.  Any class that implements Email::Sender
is required to provide a method called \f(CW\*(C`send\*(C'\fR.  This method should accept any
input that can be understood by Email::Abstract, followed by a hashref
containing \f(CW\*(C`to\*(C'\fR and \f(CW\*(C`from\*(C'\fR arguments to be used as the envelope.  The method
should return an Email::Sender::Success object on success or throw an
Email::Sender::Failure on failure.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo Signes <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

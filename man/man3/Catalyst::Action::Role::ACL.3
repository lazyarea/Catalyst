.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::Action::Role::ACL 3"
.TH Catalyst::Action::Role::ACL 3 "2012-07-13" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Action::Role::ACL \- Deprecated user role\-based authorization action class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& sub foo
\& :Local
\& :ActionClass(Role::ACL)
\& :RequiresRole(admin)
\& :ACLDetachTo(denied)
\& {
\&     my ($self, $c) = @_;
\&     ...
\& }
\&
\& sub denied :Private {
\&     my ($self, $c) = @_;
\&
\&     $c\->res\->status(\*(Aq403\*(Aq);
\&     $c\->res\->body(\*(AqDenied!\*(Aq);
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides a Catalyst reusable action for user
role-based authorization. ACLs are applied via the assignment of attributes to
application action subroutines.
.PP
You are better using Catalyst::ActionRole::ACL to do this, as it plays
nicely with other extensions. This package is maintained to allow compatibility
with people using this in existing code, but will warn once when used.
.SH "AUTHOR"
.IX Header "AUTHOR"
David P.C. Wollmann <converter42@gmail.com>
.SH "BUGS"
.IX Header "BUGS"
This is new code. Find the bugs and report them, please.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2009 by David P.C. Wollmann
.PP
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "CatalystX::SimpleLogin::TraitFor::Controller::Login::WithRedirect 3"
.TH CatalystX::SimpleLogin::TraitFor::Controller::Login::WithRedirect 3 "2012-07-16" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CatalystX::SimpleLogin::TraitFor::Controller::Login::WithRedirect \- redirect
users who login back to the page they originally requested.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyApp::Controller::NeedsAuth;
\&
\&    use Moose;
\&    use namespace::autoclean;
\&
\&    # One needs to inherit from Catalyst::Controller in order
\&    # to get the Does(\*(AqNeedsLogin\*(Aq) functionality.
\&    BEGIN { extends \*(AqCatalyst::Controller\*(Aq; }
\&
\&    sub inbox : Path Does(\*(AqNeedsLogin\*(Aq) {
\&        # Redirects to /login if not logged in
\&        my ($self, $c) = @_;
\&
\&        $c\->stash\->{template} = "inbox.tt2";
\&
\&        return;
\&    }
\&
\&    # Turn on in config
\&    MyApp\->config(\*(AqContoller::Login\*(Aq => { traits => \*(AqWithRedirect\*(Aq });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides the \f(CW\*(C`login\*(C'\fR
action with a wrapper to redirect to a page which needs authentication, from which the
user was previously redirected. Goes hand in hand with Catalyst::ActionRole::NeedsLogin
.SH "WRAPPED METHODS"
.IX Header "WRAPPED METHODS"
.SS "redirect_after_login_uri"
.IX Subsection "redirect_after_login_uri"
Make it use and extract \f(CW\*(C`$c\->session\->{redirect_to_after_login}\*(C'\fR 
if it exists.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$controller\->login_redirect($c, $message)"
.el .SS "\f(CW$controller\fP\->login_redirect($c, \f(CW$message\fP)"
.IX Subsection "$controller->login_redirect($c, $message)"
This sets the error message to \f(CW$message\fR and sets
\&\f(CW\*(C`$c\->session\->{redirect_to_after_login}\*(C'\fR to the current \s-1URL\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "CatalystX::SimpleLogin::Controller::Login" 4
.IX Item "CatalystX::SimpleLogin::Controller::Login"
.PD 0
.IP "CatalystX::SimpleLogin::Form::Login" 4
.IX Item "CatalystX::SimpleLogin::Form::Login"
.PD
.SH "AUTHORS"
.IX Header "AUTHORS"
See CatalystX::SimpleLogin for authors.
.SH "LICENSE"
.IX Header "LICENSE"
See CatalystX::SimpleLogin for license.

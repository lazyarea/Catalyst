.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Email::Sender::Transport::Test 3"
.TH Email::Sender::Transport::Test 3 "2014-10-11" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Email::Sender::Transport::Test \- deliver mail in memory for testing
.SH "VERSION"
.IX Header "VERSION"
version 1.300016
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This transport is meant for testing email deliveries in memory.  It will store
a record of any delivery made so that they can be inspected afterward.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "deliveries"
.IX Subsection "deliveries"
By default, the Test transport will not allow partial success and will always
succeed.  It can be made to fail predictably, however, if it is extended and
its \f(CW\*(C`recipient_failure\*(C'\fR or \f(CW\*(C`delivery_failure\*(C'\fR methods are overridden.  These
methods are called as follows:
.PP
.Vb 1
\&  $self\->delivery_failure($email, $envelope);
\&
\&  $self\->recipient_failure($to);
.Ve
.PP
If they return true, the sending will fail.  If the transport was created with
a true \f(CW\*(C`allow_partial_success\*(C'\fR attribute, recipient failures can cause partial
success to be returned.
.PP
For more flexible failure modes, you can override more aggressively or can use
Email::Sender::Transport::Failable.
.PP
This attribute stores an arrayref of all the deliveries made via the transport.
.PP
Each delivery is a hashref, in the following format:
.PP
.Vb 6
\&  {
\&    email     => $email,
\&    envelope  => $envelope,
\&    successes => \e@ok_rcpts,
\&    failures  => \e@failures,
\&  }
.Ve
.PP
Both successful and failed deliveries are stored.
.PP
A number of methods related to this attribute are provided:
.IP "\(bu" 4
delivery_count
.IP "\(bu" 4
clear_deliveries
.IP "\(bu" 4
shift_deliveries
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo Signes <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

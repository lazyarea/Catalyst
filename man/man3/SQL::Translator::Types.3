.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Types 3"
.TH SQL::Translator::Types 3 "2014-06-28" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Translator::Types \- Type checking functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    package Foo;
\&    use Moo;
\&    use SQL::Translator::Types qw(schema_obj enum);
\&
\&    has foo => ( is => \*(Aqrw\*(Aq, isa => schema_obj(\*(AqTrigger\*(Aq) );
\&    has bar => ( is => \*(Aqrw\*(Aq, isa => enum([qw(baz quux quuz)], {
\&        msg => "Invalid value for bar: \*(Aq%s\*(Aq", icase => 1,
\&    });
.Ve
.SH "DESCRIPTIONS"
.IX Header "DESCRIPTIONS"
This module exports functions that return coderefs suitable for Moo
\&\f(CW\*(C`isa\*(C'\fR type checks.
Errors are reported using \*(L"throw\*(R" in SQL::Translator::Utils.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "schema_obj($type)"
.IX Subsection "schema_obj($type)"
Returns a coderef that checks that its arguments is an object of the
class \f(CW\*(C`SQL::Translator::Schema::\f(CI$type\f(CW\*(C'\fR.
.SS "enum(\e@strings, [$msg | \e%parameters])"
.IX Subsection "enum(@strings, [$msg | %parameters])"
Returns a coderef that checks that the argument is one of the provided
\&\f(CW@strings\fR.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.IP "msg" 4
.IX Item "msg"
sprintf string for the error message.
If no other parameters are needed, this can be provided on its own,
instead of the \f(CW%parameters\fR hashref.
The invalid value is passed as the only argument.
Defaults to \f(CW\*(C`Invalid value: \*(Aq%s\*(Aq\*(C'\fR.
.IP "icase" 4
.IX Item "icase"
If true, folds the values to lower case before checking for equality.
.IP "allow_undef" 4
.IX Item "allow_undef"
If true, allow \f(CW\*(C`undef\*(C'\fR in addition to the specified strings.
.IP "allow_false" 4
.IX Item "allow_false"
If true, allow any false value in addition to the specified strings.

.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Moose::Autobox::Hash 3"
.TH Moose::Autobox::Hash 3 "2013-10-28" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Autobox::Hash \- the Hash role
.SH "SYNOPOSIS"
.IX Header "SYNOPOSIS"
.Vb 1
\&  use Moose::Autobox;
\&  
\&  print { one => 1, two => 2 }\->keys\->join(\*(Aq, \*(Aq); # prints \*(Aqone, two\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a role to describes a Hash value.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBdelete\fR" 4
.IX Item "delete"
.PD 0
.IP "\fBmerge\fR" 4
.IX Item "merge"
.PD
Takes a hashref and returns a new hashref with right precedence
shallow merging.
.IP "\fBhslice\fR" 4
.IX Item "hslice"
Slices a hash but returns the keys and values as a new hashref.
.IP "\fBflatten\fR" 4
.IX Item "flatten"
.SS "Indexed implementation"
.IX Subsection "Indexed implementation"
.PD 0
.IP "\fBat\fR" 4
.IX Item "at"
.IP "\fBput\fR" 4
.IX Item "put"
.IP "\fBexists\fR" 4
.IX Item "exists"
.IP "\fBkeys\fR" 4
.IX Item "keys"
.IP "\fBvalues\fR" 4
.IX Item "values"
.IP "\fBkv\fR" 4
.IX Item "kv"
.IP "\fBslice\fR" 4
.IX Item "slice"
.IP "\fBeach\fR" 4
.IX Item "each"
.IP "\fBeach_key\fR" 4
.IX Item "each_key"
.IP "\fBeach_value\fR" 4
.IX Item "each_value"
.IP "\fBeach_n_values\fR" 4
.IX Item "each_n_values"
.IP "\fBmeta\fR" 4
.IX Item "meta"
.IP "\fBprint\fR" 4
.IX Item "print"
.IP "\fBsay\fR" 4
.IX Item "say"
.PD
.SH "BUGS"
.IX Header "BUGS"
All complex software has bugs lurking in it, and this module is no 
exception. If you find a bug please either email me, or add the bug
to cpan-RT.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stevan Little <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2006\-2008 by Infinity Interactive, Inc.
.PP
<http://www.iinteractive.com>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

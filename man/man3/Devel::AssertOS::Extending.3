.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Devel::AssertOS::Extending 3"
.TH Devel::AssertOS::Extending 3 "2014-04-17" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::AssertOS::Extending \- how to write Devel::AssertOS::* modules that
check what platform they're running on
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Devel::AssertOS::* modules are used by Devel::CheckOS to figure out what
\&\s-1OS\s0 it is running on.  A set of modules are provided which should correctly
detect all platforms that perl *currently* runs on, as well as detecting
\&\s-1OS\s0 'families' like 'Unix' and 'Windows'.
.PP
You can also use Devel::AssertOS::* modules on their own to quickly check
whether you're running on the right platform.
.PP
If you try to \f(CW\*(C`use\*(C'\fR a Devel::AssertOS module on the wrong platform, it
will \f(CW\*(C`die\*(C'\fR by calling \f(CW\*(C`Devel::CheckOS::die_unsupported()\*(C'\fR.  This
conveniently spits out the text that CPAN-testers look for to see if
your code failed simply because they're doing something as silly as
testing your Solaris-only code on \s-1HPUX\s0.
.SH "HOW TO WRITE YOUR OWN MODULES"
.IX Header "HOW TO WRITE YOUR OWN MODULES"
If you want to add support for new platforms, you need to write a module
called Devel::AssertOS::PlatformName which looks like:
.PP
.Vb 6
\&    package Devel::AssertOS::Linux;
\&    use Devel::CheckOS;
\&    $VERSION = \*(Aq1.0\*(Aq;
\&    sub os_is { $^O =~ /^linux$/i ? 1 : 0; }
\&    Devel::CheckOS::die_unsupported() unless(os_is());
\&    1;
.Ve
.PP
And that's it.  The subroutine \fBmust\fR be called \f(CW\*(C`os_is\*(C'\fR and loading the
module \fBmust\fR die in precisely that manner if your code is running on
the wrong platform. It's a good idea to check $^O case-insensitively
as it's not consistent. Note that it is an error to say:
.PP
.Vb 1
\&    sub os_is { 1; }
.Ve
.PP
and assume \*(L"well, on the wrong platform that'll never get reached because
the module can't load\*(R".  Because the module *can* load, and indeed *does
get loaded* \- some functions in Devel::CheckOS do things like:
.PP
.Vb 1
\&    eval "use Devel::AssertOS::$os";
.Ve
.PP
to suppress the error.
.PP
If you want to support a 'family' of OSes, then instead of matching against
\&\f(CW$^O\fR, instead use \f(CW\*(C`Devel::CheckOS::os_is\*(C'\fR to check that we're running on
any of the OSes in your family, like this:
.PP
match any of several values of \f(CW$^O\fR like this:
.PP
.Vb 7
\&    package Devel::AssertOS::FreeSoftware;
\&    use Devel::CheckOS;
\&    $VERSION = \*(Aq1.0\*(Aq;
\&    sub matches { return qw(Linux FreeBSD NetBSD OpenBSD DragonflyBSD); }
\&    sub os_is { Devel::CheckOS::os_is(matches()); }
\&    sub expn { "The operating system is free\-as\-in\-beer" }
\&    Devel::CheckOS::die_unsupported() unless(os_is());
.Ve
.PP
You may also add a subroutine called \f(CW\*(C`expn\*(C'\fR which should return a small
snippet of explanatory text.  Again, see Devel::AssertOS::Unix for an
example.  This is particularly useful for 'family' modules.
.PP
Note the \f(CW\*(C`matches\*(C'\fR subroutine \- this is so that people can query your
module and see what OSes are in your family.
.SH "VERSIONS OF AN OS"
.IX Header "VERSIONS OF AN OS"
Two levels of name are supported.  So \f(CW\*(C`Devel::AssertOS::Linux::v2_6\*(C'\fR is
legal.  More than two levels are not supported.  Be careful to pick names
that are both legal perl package names and legal filenames on all platforms.
In general, this means anything that matches \f(CW\*(C`/[_a\-z]\ew*/i\*(C'\fR.
.SH "OS FEATURES"
.IX Header "OS FEATURES"
I would like to reserve the namespace \f(CW\*(C`Devel::AssertOS::OSFeatures::*\*(C'\fR.
If you want to release a module that tells the user whether a particular
feature is available (eg, whether \s-1POSIX\s0 shell redirection can be expected
to work) then please discuss it with me first.
.SH "BUGS and FEEDBACK"
.IX Header "BUGS and FEEDBACK"
I welcome feedback about my code, including constructive criticism.
Bug reports should be made using <http://rt.cpan.org/> or by email.
.PP
If you are feeling particularly generous you can encourage me in my
open source endeavours by buying me something from my wishlist:
  <http://www.cantrell.org.uk/david/wishlist/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Devel::CheckOS
.PP
$^O in perlvar
.PP
perlport
.SH "AUTHOR"
.IX Header "AUTHOR"
David Cantrell <\fIdavid@cantrell.org.uk\fR>
.PP
Thanks to David Golden for the name and ideas about the interface, and
for the cpan-testers-discuss mailing list for prompting me to write it
in the first place.
.SH "COPYRIGHT and LICENCE"
.IX Header "COPYRIGHT and LICENCE"
Copyright 2007 \- 2014 David Cantrell
.PP
This documentation is free-as-in-speech.  It may be used,
distributed and modified under the terms of the Creative Commons
Attribution-Share Alike 2.0 \s-1UK:\s0 England & Wales License, whose
text you may read at
http://creativecommons.org/licenses/by\-sa/2.0/uk/ <http://creativecommons.org/licenses/by-sa/2.0/uk/>.
.SH "CONSPIRACY"
.IX Header "CONSPIRACY"
This documentation is also free-as-in-mason.

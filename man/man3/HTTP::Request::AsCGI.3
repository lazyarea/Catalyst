.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "HTTP::Request::AsCGI 3"
.TH HTTP::Request::AsCGI 3 "2010-01-13" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTTP::Request::AsCGI \- Set up a CGI environment from an HTTP::Request
.SH "VERSION"
.IX Header "VERSION"
version 1.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use CGI;
\&    use HTTP::Request;
\&    use HTTP::Request::AsCGI;
\&
\&    my $request = HTTP::Request\->new( GET => \*(Aqhttp://www.host.com/\*(Aq );
\&    my $stdout;
\&
\&    {
\&        my $c = HTTP::Request::AsCGI\->new($request)\->setup;
\&        my $q = CGI\->new;
\&
\&        print $q\->header,
\&              $q\->start_html(\*(AqHello World\*(Aq),
\&              $q\->h1(\*(AqHello World\*(Aq),
\&              $q\->end_html;
\&
\&        $stdout = $c\->stdout;
\&
\&        # environment and descriptors will automatically be restored
\&        # when $c is destructed.
\&    }
\&
\&    while ( my $line = $stdout\->getline ) {
\&        print $line;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides a convenient way of setting up an \s-1CGI\s0 environment from an HTTP::Request.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "new ( $request [, key => value ] )" 4
.el .IP "new ( \f(CW$request\fR [, key => value ] )" 4
.IX Item "new ( $request [, key => value ] )"
Constructor.  The first argument must be a instance of HTTP::Request, followed
by optional pairs of environment key and value.
.IP "environment" 4
.IX Item "environment"
Returns a hashref containing the environment that will be used in setup.
Changing the hashref after setup has been called will have no effect.
.IP "setup" 4
.IX Item "setup"
Sets up the environment and descriptors.
.IP "restore" 4
.IX Item "restore"
Restores the environment and descriptors. Can only be called after setup.
.IP "request" 4
.IX Item "request"
Returns the request given to constructor.
.IP "response" 4
.IX Item "response"
Returns a HTTP::Response. Can only be called after restore.
.IP "stdin" 4
.IX Item "stdin"
Accessor for handle that will be used for \s-1STDIN\s0, must be a real seekable
handle with an file descriptor. Defaults to a tempoary IO::File instance.
.IP "stdout" 4
.IX Item "stdout"
Accessor for handle that will be used for \s-1STDOUT\s0, must be a real seekable
handle with an file descriptor. Defaults to a tempoary IO::File instance.
.IP "stderr" 4
.IX Item "stderr"
Accessor for handle that will be used for \s-1STDERR\s0, must be a real seekable
handle with an file descriptor.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "examples directory in this distribution." 4
.IX Item "examples directory in this distribution."
.PD 0
.IP "WWW::Mechanize::CGI" 4
.IX Item "WWW::Mechanize::CGI"
.IP "Test::WWW::Mechanize::CGI" 4
.IX Item "Test::WWW::Mechanize::CGI"
.PD
.SH "THANKS TO"
.IX Header "THANKS TO"
Thomas L. Shinnick for his valuable win32 testing.
.SH "AUTHORS"
.IX Header "AUTHORS"
Christian Hansen <ch@ngmedia.com>
Hans Dieter Pearcey <hdp@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Christian Hansen <ch@ngmedia.com>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::Helper::Model::Adaptor 3"
.TH Catalyst::Helper::Model::Adaptor 3 "2010-02-09" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Helper::Model::Adaptor \- helper for the incredibly lazy
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Running:
.PP
.Vb 1
\&    ./script/myapp_create.pl model SomeClass Adaptor MyApp::Backend::SomeClass create
.Ve
.PP
Will create \f(CW\*(C`YourApp::Model::SomeClass\*(C'\fR that looks like:
.PP
.Vb 4
\&    package YourApp::Model::SomeClass;
\&    use strict;
\&    use warnings;
\&    use base \*(AqCatalyst::Model::Adaptor\*(Aq;
\&    
\&    _\|_PACKAGE_\|_\->config( 
\&        class       => \*(AqMyApp::Backend::SomeClass\*(Aq,
\&        constructor => \*(Aqcreate\*(Aq,
\&    );
\&
\&    1;
.Ve
.PP
Why you need a script to generate that is beyond me, but here it is.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.Vb 1
\&   ./script/myapp_create.pl model <model_name> Adaptor <class> [<constructor>]
.Ve
.PP
You need to sepecify the \f(CW\*(C`model_name\*(C'\fR (the name of the model), and
\&\f(CW\*(C`class\*(C'\fR, the class being adapted.  If \f(CW\*(C`$class\->new\*(C'\fR isn't going
to do what you want, pass the name of \f(CW$class\fR's constructor as
\&\f(CW\*(C`constructor\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonathan Rockway \f(CW\*(C`<jrockway@cpan.org>\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software. You can redistribute it and/or modify
it under the same terms as perl itself.
.PP
No copyright claim is asserted over the generated code.

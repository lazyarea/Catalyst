.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Producer::Diagram 3"
.TH SQL::Translator::Producer::Diagram 3 "2014-06-28" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Translator::Producer::Diagram \- ER diagram producer for SQL::Translator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Use via SQL::Translator:
.PP
.Vb 1
\&  use SQL::Translator;
\&
\&  my $t = SQL::Translator\->new(
\&      from          => \*(AqMySQL\*(Aq,
\&      to            => \*(AqDiagram\*(Aq,
\&      producer_args => {
\&          # All args are optional
\&          out_file         => \*(Aqschema.png\*(Aq,# if not provided will return from translate()
\&          output_type      => \*(Aqpng\*(Aq,       # is default or \*(Aqjpeg\*(Aq
\&          title            => \*(AqMy Schema\*(Aq, # default is filename
\&          font_size        => \*(Aqmedium\*(Aq,    # is default or \*(Aqsmall,\*(Aq \*(Aqlarge\*(Aq
\&          imap_file        => \*(Aq\*(Aq,          # filename to write image map coords
\&          imap_url         => \*(Aq\*(Aq,          # base URL for image map
\&          gutter           => 30           # is default, px distance b/w cols
\&          num_columns      => 5,           # the number of columns
\&          no_lines         => 1,           # do not draw lines to show FKs
\&          add_color        => 1,           # give it some color
\&          show_fk_only     => 1,           # show only fields used in FKs
\&          join_pk_only     => 1,           # use only primary keys to figure PKs
\&          natural_join     => 1,           # intuit FKs if not defined
\&          skip_fields      => [...],       # list* of field names to exclude
\&          skip_tables      => [...],       # list* of table names to exclude
\&          skip_tables_like => [...],       # list* of regexen to exclude tables
\&      }
\&  ) or die SQL::Translator\->error;
\&  $t\->translate;
.Ve
.PP
* \*(L"list\*(R" can be either an array-ref or a comma-separated string
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Youens-Clark <kclark@cpan.org>.

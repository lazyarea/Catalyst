.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Email::Sender::Failure 3"
.TH Email::Sender::Failure 3 "2014-10-11" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Email::Sender::Failure \- a report of failure from an email sending transport
.SH "VERSION"
.IX Header "VERSION"
version 1.300016
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "message"
.IX Subsection "message"
This method returns the failure message, which should describe the failure.
Failures stringify to this message.
.SS "code"
.IX Subsection "code"
This returns the numeric code of the failure, if any.  This is mostly useful
for network protocol transports like \s-1SMTP\s0.  This may be undefined.
.SS "recipients"
.IX Subsection "recipients"
This returns a list of addresses to which the email could not be sent.
.SH "METHODS"
.IX Header "METHODS"
.SS "throw"
.IX Subsection "throw"
This method can be used to instantiate and throw an Email::Sender::Failure
object at once.
.PP
.Vb 1
\&  Email::Sender::Failure\->throw(\e%arg);
.Ve
.PP
Instead of a hashref of args, you can pass a single string argument which will
be used as the \f(CW\*(C`message\*(C'\fR of the new failure.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Email::Sender::Permanent
.IP "\(bu" 4
Email::Sender::Temporary
.IP "\(bu" 4
Email::Sender::Multi
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo Signes <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

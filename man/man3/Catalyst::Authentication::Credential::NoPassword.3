.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::Authentication::Credential::NoPassword 3"
.TH Catalyst::Authentication::Credential::NoPassword 3 "2013-01-09" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Authentication::Credential::NoPassword \- Authenticate a user
without a password.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Catalyst qw/
\&      Authentication
\&      /;
\&
\&    package MyApp::Controller::Auth;
\&
\&    sub login_as_another_user : Local {
\&        my ($self, $c) = @_;
\&
\&        if ($c\->user_exists() and $c\->user\->username() eq \*(Aqroot\*(Aq) {
\&            $c\->authenticate( {id => c\->req\->params\->{user_id}}, \*(Aqnopassword\*(Aq );
\&        }
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This authentication credential checker takes authentication information 
(most often a username) and retrieves the user from the store. No validation
of any credentials is done. This is intended for administrative backdoors,
\&\s-1SAML\s0 logins and so on when you have identified the new user by other means.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.Vb 10
\&    # example
\&    <Plugin::Authentication>
\&        <nopassword>
\&            <credential>
\&                class = NoPassword
\&            </credential>
\&            <store>
\&                class = DBIx::Class
\&                user_model = DB::User
\&                role_relation = roles
\&                role_field = name
\&            </store>
\&        </nopassword>
\&    </Plugin::Authentication>
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "authenticate ( $c, $realm, $authinfo )"
.el .SS "authenticate ( \f(CW$c\fP, \f(CW$realm\fP, \f(CW$authinfo\fP )"
.IX Subsection "authenticate ( $c, $realm, $authinfo )"
Try to log a user in.

.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Plack::Middleware::MethodOverride 3"
.TH Plack::Middleware::MethodOverride 3 "2014-11-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
Plack::Middleware::MethodOverride \- Override \s-1REST\s0 methods to Plack apps via \s-1POST\s0
.SH "Synopsis"
.IX Header "Synopsis"
In your Plack App:
.PP
.Vb 5
\&  use Plack::Builder;
\&  builder {
\&      enable MethodOverride;
\&      $app;
\&  };
.Ve
.PP
\&\s-1PUT\s0 via a query parameter in your \s-1POST\s0 forms:
.PP
.Vb 3
\&  <form method="POST" action="/foo?x\-tunneled\-method=PUT">
\&    <!\-\- ... \-\->
\&  </form>
.Ve
.PP
Or override it via the \f(CW\*(C`x\-http\-method\-override\*(C'\fR header in a request:
.PP
.Vb 3
\&  my $req = HTTP::Request\->new(POST => \*(Aq/foo\*(Aq, [
\&      \*(Aqx\-http\-method\-override\*(Aq => \*(AqPUT\*(Aq
\&  ]);
.Ve
.SH "Description"
.IX Header "Description"
Writing
\&\s-1REST\s0 <http://en.wikipedia.org/wiki/Representational_State_Transfer>ful apps
is a good thing, but if you're also trying to support web browsers, you're
probably going to need some hackish workarounds. This module provides one such
workaround for your Plack applications.
.PP
Specifically, you can also use a header named \f(CW\*(C`X\-HTTP\-Method\-Override\*(C'\fR (as
used by Google for its APIs) override the \s-1POST\s0 request method. Or you can add
a parameter named \f(CW\*(C`x\-tunneled\-method\*(C'\fR to your form action's query. Either
way, the overriding works \fIonly\fR via \s-1POST\s0 requests, not \s-1GET\s0.
.PP
If either of these attributes are available in a \s-1POST\s0 request, the
\&\f(CW\*(C`REQUEST_METHOD\*(C'\fR key of the Plack environment hash will be replaced with its
value. This allows your apps to override any \s-1HTTP\s0 method over \s-1POST\s0. If your
application needs to know that such overriding has taken place, the original
method is stored under the \f(CW\*(C`plack.original_request_method\*(C'\fR key in the Plack
environment hash.
.PP
The list of methods you can specify are:
.IP "\s-1GET\s0" 4
.IX Item "GET"
.PD 0
.IP "\s-1POST\s0" 4
.IX Item "POST"
.IP "\s-1HEAD\s0" 4
.IX Item "HEAD"
.IP "\s-1PUT\s0" 4
.IX Item "PUT"
.IP "\s-1DELETE\s0" 4
.IX Item "DELETE"
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
.IP "\s-1TRACE\s0" 4
.IX Item "TRACE"
.IP "\s-1CONNECT\s0" 4
.IX Item "CONNECT"
.PD
.SS "Configuration"
.IX Subsection "Configuration"
If for some reason you need to use a different query parameter or header to
override methods, just configure it, like so:
.PP
.Vb 1
\&   enable \*(AqMethodOverride\*(Aq, header => \*(AqX\-HTTP\-Method\*(Aq, param => \*(Aqmy_method\*(Aq;
.Ve
.PP
The configuration keys are:
.ie n .IP """header""" 4
.el .IP "\f(CWheader\fR" 4
.IX Item "header"
Specifies the \s-1HTTP\s0 header name to specify the overriding \s-1HTTP\s0 method. Defaults
to \f(CW\*(C`X\-HTTP\-Method\-Override\*(C'\fR.
.ie n .IP """param""" 4
.el .IP "\f(CWparam\fR" 4
.IX Item "param"
Specifies the query parameter name to specify the overriding \s-1HTTP\s0 method.
Defaults to \f(CW\*(C`x\-tunneled\-method\*(C'\fR.
.SH "Support"
.IX Header "Support"
This module is stored in an open GitHub
repository <http://github.com/theory/plack-middleware-methodoverride/tree/>. Feel
free to fork and contribute!
.PP
Please file bug reports via GitHub
Issues <http://github.com/theory/plack-middleware-browserrest/issues/> or by
sending mail to
bug\-Plack\-Middleware\-MethodOverride@rt.cpan.org <mailto:bug-Plack-Middleware-MethodOverride@rt.cpan.org>.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
This module gleefully steals from
Catalyst::TraitFor::Request::REST::ForBrowsers by Dave Rolsky and the
original version by Tatsuhiko Miyagawa (which in turn stole from
HTTP::Engine::Middleware::MethodOverride). Thanks to Aristotle
Pagaltzis <http://plasmasturm.org/> for the shove in this direction, to Matt
S Trout <http://www.trout.me.uk/> for suggesting that it be implemented as
middleware, and to Hans Dieter Pearcey <http://www.weftsoar.net/> for
convincing me not to parse body parameters.
.SH "Author"
.IX Header "Author"
David E. Wheeler <david@kineticode.com>
.SH "Copyright and License"
.IX Header "Copyright and License"
Copyright (c) 2010 David E. Wheeler. Some Rights Reserved.
.PP
This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

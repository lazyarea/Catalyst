.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "MooseX::RelatedClassRoles 3"
.TH MooseX::RelatedClassRoles 3 "2009-04-13" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::RelatedClassRoles \- Apply roles to a class related to yours
.SH "VERSION"
.IX Header "VERSION"
version 0.004
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package My::Class;
\&    use Moose;
\&
\&    has driver_class => (
\&      isa => \*(AqMyApp::Driver\*(Aq,
\&    );
\&
\&    with \*(AqMooseX::RelatedClassRoles\*(Aq => { name => \*(Aqdriver\*(Aq };
\&
\&    # ...
\&
\&    my $obj = My::Class\->new(driver_class => "Some::Driver");
\&    $obj\->apply_driver_class_roles("Other::Driver::Role");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Frequently, you have to use a class that provides some \f(CW\*(C`foo_class\*(C'\fR accessor or
attribute as a method of dependency injection.  Use this role when you'd rather
apply roles to make your custom \f(CW\*(C`foo_class\*(C'\fR instead of manually setting up a
subclass.
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.SS "name"
.IX Subsection "name"
A string naming the related class.  \f(CW\*(C`driver\*(C'\fR in the \*(L"\s-1SYNOPSIS\s0\*(R".  Required.
.SS "class_accessor_name"
.IX Subsection "class_accessor_name"
A string naming the related class accessor.  \f(CW\*(C`driver_class\*(C'\fR in the
\&\*(L"\s-1SYNOPSIS\s0\*(R".  Defaults to appending \f(CW\*(C`_class\*(C'\fR to the \f(CW\*(C`name\*(C'\fR.
.SS "apply_method_name"
.IX Subsection "apply_method_name"
A string naming the role applying method.  \f(CW\*(C`apply_driver_class_names\*(C'\fR in the
\&\*(L"\s-1SYNOPSIS\s0\*(R".  Defaults to adding \f(CW\*(C`apply_\*(C'\fR and \f(CW\*(C`_names\*(C'\fR to the
\&\f(CW\*(C`class_accessor_name\*(C'\fR.
.SH "BLAME"
.IX Header "BLAME"
.Vb 1
\&    Florian Ragwitz (rafl)
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&  Hans Dieter Pearcey <hdp@cpan.org>
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2009 by Hans Dieter Pearcey <hdp@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as perl itself.

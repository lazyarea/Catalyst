.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Email::Sender::Transport::SMTP 3"
.TH Email::Sender::Transport::SMTP 3 "2014-10-11" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Email::Sender::Transport::SMTP \- send email over SMTP
.SH "VERSION"
.IX Header "VERSION"
version 1.300016
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This transport is used to send email over \s-1SMTP\s0, either with or without secure
sockets (\s-1SSL\s0).  It is one of the most complex transports available, capable of
partial success.
.PP
For a potentially more efficient version of this transport, see
Email::Sender::Transport::SMTP::Persistent.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
The following attributes may be passed to the constructor:
.ie n .IP """host"": the name of the host to connect to; defaults to ""localhost""" 4
.el .IP "\f(CWhost\fR: the name of the host to connect to; defaults to \f(CWlocalhost\fR" 4
.IX Item "host: the name of the host to connect to; defaults to localhost"
.PD 0
.ie n .IP """ssl"": if true, connect via \s-1SSL\s0; defaults to false" 4
.el .IP "\f(CWssl\fR: if true, connect via \s-1SSL\s0; defaults to false" 4
.IX Item "ssl: if true, connect via SSL; defaults to false"
.ie n .IP """port"": port to connect to; defaults to 25 for non-SSL, 465 for \s-1SSL\s0" 4
.el .IP "\f(CWport\fR: port to connect to; defaults to 25 for non-SSL, 465 for \s-1SSL\s0" 4
.IX Item "port: port to connect to; defaults to 25 for non-SSL, 465 for SSL"
.ie n .IP """timeout"": maximum time in secs to wait for server; default is 120" 4
.el .IP "\f(CWtimeout\fR: maximum time in secs to wait for server; default is 120" 4
.IX Item "timeout: maximum time in secs to wait for server; default is 120"
.ie n .IP """sasl_username"": the username to use for auth; optional" 4
.el .IP "\f(CWsasl_username\fR: the username to use for auth; optional" 4
.IX Item "sasl_username: the username to use for auth; optional"
.ie n .IP """sasl_password"": the password to use for auth; required if ""username"" is provided" 4
.el .IP "\f(CWsasl_password\fR: the password to use for auth; required if \f(CWusername\fR is provided" 4
.IX Item "sasl_password: the password to use for auth; required if username is provided"
.ie n .IP """allow_partial_success"": if true, will send data even if some recipients were rejected; defaults to false" 4
.el .IP "\f(CWallow_partial_success\fR: if true, will send data even if some recipients were rejected; defaults to false" 4
.IX Item "allow_partial_success: if true, will send data even if some recipients were rejected; defaults to false"
.ie n .IP """helo"": what to say when saying \s-1HELO\s0; no default" 4
.el .IP "\f(CWhelo\fR: what to say when saying \s-1HELO\s0; no default" 4
.IX Item "helo: what to say when saying HELO; no default"
.ie n .IP """localaddr"": local address from which to connect" 4
.el .IP "\f(CWlocaladdr\fR: local address from which to connect" 4
.IX Item "localaddr: local address from which to connect"
.ie n .IP """localport"": local port from which to connect" 4
.el .IP "\f(CWlocalport\fR: local port from which to connect" 4
.IX Item "localport: local port from which to connect"
.ie n .IP """debug"": if true, put the Net::SMTP object in debug mode" 4
.el .IP "\f(CWdebug\fR: if true, put the Net::SMTP object in debug mode" 4
.IX Item "debug: if true, put the Net::SMTP object in debug mode"
.PD
.SH "PARTIAL SUCCESS"
.IX Header "PARTIAL SUCCESS"
If \f(CW\*(C`allow_partial_success\*(C'\fR was set when creating the transport, the transport
may return Email::Sender::Success::Partial objects.  Consult that module's
documentation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo Signes <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

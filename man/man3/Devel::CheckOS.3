.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Devel::CheckOS 3"
.TH Devel::CheckOS 3 "2014-08-02" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::CheckOS \- check what OS we're running on
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A learned sage once wrote on \s-1IRC:\s0
.PP
.Vb 1
\&   $^O is stupid and ugly, it wears its pants as a hat
.Ve
.PP
Devel::CheckOS provides a more friendly interface to $^O, and also lets
you check for various \s-1OS\s0 \*(L"families\*(R" such as \*(L"Unix\*(R", which includes things
like Linux, Solaris, \s-1AIX\s0 etc.
.PP
It spares perl the embarrassment of wearing its pants on its head by
covering them with a splendid Fedora.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Devel::CheckOS qw(os_is);
\&    print "Hey, I know this, it\*(Aqs a Unix system\en" if(os_is(\*(AqUnix\*(Aq));
\&
\&    print "You\*(Aqve got Linux 2.6\en" if(os_is(\*(AqLinux::v2_6\*(Aq));
.Ve
.SH "USING IT IN Makefile.PL or Build.PL"
.IX Header "USING IT IN Makefile.PL or Build.PL"
If you want to use this from Makefile.PL or Build.PL, do
not simply copy the module into your distribution as this may cause
problems when \s-1PAUSE\s0 and search.cpan.org index the distro.  Instead, use
the use-devel-assertos script.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Devel::CheckOS implements the following functions, which load subsidiary
OS-specific modules on demand to do the real work.  They can be exported
by listing their names after \f(CW\*(C`use Devel::CheckOS\*(C'\fR.  You can also export
groups of functions thus:
.PP
.Vb 2
\&    use Devel::CheckOS qw(:booleans); # export the boolean functions
\&                                      # and \*(Aqdie_unsupported\*(Aq
\&    
\&    use Devel::CheckOS qw(:fatal);    # export those that die on no match
\&
\&    use Devel::CheckOS qw(:all);      # export everything
.Ve
.SS "Boolean functions"
.IX Subsection "Boolean functions"
\fIos_is\fR
.IX Subsection "os_is"
.PP
Takes a list of \s-1OS\s0 names.  If the current platform matches any of them,
it returns true, otherwise it returns false.  The names can be a mixture
of OSes and \s-1OS\s0 families, eg ...
.PP
.Vb 1
\&    os_is(qw(Unix VMS)); # Unix is a family, VMS is an OS
.Ve
.PP
\fIos_isnt\fR
.IX Subsection "os_isnt"
.PP
If the current platform matches any of the parameters it returns false,
otherwise it returns true.
.SS "Fatal functions"
.IX Subsection "Fatal functions"
\fIdie_if_os_isnt\fR
.IX Subsection "die_if_os_isnt"
.PP
As \f(CW\*(C`os_is()\*(C'\fR, except that it dies instead of returning false.  The \fIdie()\fR
message matches what the CPAN-testers look for to determine if a module
doesn't support a particular platform.
.PP
\fIdie_if_os_is\fR
.IX Subsection "die_if_os_is"
.PP
As \f(CW\*(C`os_isnt()\*(C'\fR, except that it dies instead of returning false.
.SS "And some utility functions ..."
.IX Subsection "And some utility functions ..."
\fIdie_unsupported\fR
.IX Subsection "die_unsupported"
.PP
This function simply dies with the message \*(L"\s-1OS\s0 unsupported\*(R", which is what
the \s-1CPAN\s0 testers look for to figure out whether a platform is supported or
not.
.PP
\fIlist_platforms\fR
.IX Subsection "list_platforms"
.PP
When called in list context,
return a list of all the platforms for which the corresponding
Devel::AssertOS::* module is available.  This includes both OSes and \s-1OS\s0
families, and both those bundled with this module and any third-party
add-ons you have installed.
.PP
In scalar context, returns a hashref keyed by platform with the filename
of the most recent version of the supporting module that is available to you.
This is to make sure that the use-devel-assertos script Does The Right Thing
in the case where you have installed the module in one version of perl, then
upgraded perl, and installed it again in the new version.  Sometimes the old
version of perl and all its modules will still be hanging around and perl
\&\*(L"helpfully\*(R" includes the old perl's search path in its own.
.PP
Unfortunately, on some platforms this list may have file case
broken.  eg, some platforms might return 'freebsd' instead of 'FreeBSD'.
This is because they have case-insensitive filesystems so things
should Just Work anyway.
.PP
\fIlist_family_members\fR
.IX Subsection "list_family_members"
.PP
Takes the name of an \s-1OS\s0 'family' and returns a list of all its members.
In list context, you get a list, in scalar context you get an arrayref.
.PP
If called on something that isn't a family, you get an empty list (or
a ref to an empty array).
.SH "PLATFORMS SUPPORTED"
.IX Header "PLATFORMS SUPPORTED"
To see the list of platforms for which information is available, run this:
.PP
.Vb 1
\&    perl \-MDevel::CheckOS \-e \*(Aqprint join(", ", Devel::CheckOS::list_platforms())\*(Aq
.Ve
.PP
Note that capitalisation is important.  These are the names of the
underlying Devel::AssertOS::* modules
which do the actual platform detection, so they have to
be 'legal' filenames and module names, which unfortunately precludes
funny characters, so platforms like \s-1OS/2\s0 are mis-spelt deliberately.
Sorry.
.PP
Also be aware that not all of them have been properly tested.  I don't
have access to most of them and have had to work from information
gleaned from perlport and a few other places.  For a complete list of
\&\s-1OS\s0 families, see Devel::CheckOS::Families.
.PP
If you want to add your own OSes or families, see Devel::AssertOS::Extending
and please feel free to upload the results to the \s-1CPAN\s0.
.SH "BUGS and FEEDBACK"
.IX Header "BUGS and FEEDBACK"
I welcome feedback about my code, including constructive criticism.
Bug reports should be made using <http://rt.cpan.org/> or by email.
.PP
You will need to include in your bug report the exact value of $^O, what
the \s-1OS\s0 is called (eg Windows Vista 64 bit Ultimate Home Edition), and,
if relevant, what \*(L"\s-1OS\s0 family\*(R" it should be in and who wrote it.
.PP
If you are feeling particularly generous you can encourage me in my
open source endeavours by buying me something from my wishlist:
  <http://www.cantrell.org.uk/david/wishlist/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
$^O in perlvar
.PP
perlport
.PP
Devel::AssertOS
.PP
Devel::AssertOS::Extending
.PP
Probe::Perl
.PP
The use-devel-assertos script
.PP
Module::Install::AssertOS
.SH "AUTHOR"
.IX Header "AUTHOR"
David Cantrell <\fIdavid@cantrell.org.uk\fR>
.PP
Thanks to David Golden for the name and ideas about the interface, and
to the cpan-testers-discuss mailing list for prompting me to write it
in the first place.
.PP
Thanks to Ken Williams, from whose Module::Build I lifted some of the
information about what should be in the Unix family.
.PP
Thanks to Billy Abbott for finding some bugs for me on \s-1VMS\s0.
.PP
Thanks to Matt Kraai for information about \s-1QNX\s0.
.PP
Thanks to Kenichi Ishigaki and Gabor Szabo for reporting a bug on Windows,
and to the former for providing a patch.
.PP
Thanks to Paul Green for some information about \s-1VOS\s0.
.PP
Thanks to Yanick Champoux for a patch to let Devel::AssertOS support
negative assertions.
.PP
Thanks to Brian Fraser for adding Android support.
.SH "SOURCE CODE REPOSITORY"
.IX Header "SOURCE CODE REPOSITORY"
git://github.com/DrHyde/perl\-modules\-Devel\-CheckOS.git <git://github.com/DrHyde/perl-modules-Devel-CheckOS.git>
.SH "COPYRIGHT and LICENCE"
.IX Header "COPYRIGHT and LICENCE"
Copyright 2007\-2012 David Cantrell
.PP
This software is free-as-in-speech software, and may be used, distributed, and modified under the terms of either the \s-1GNU\s0 General Public Licence version 2 or the Artistic Licence. It's up to you which one you use. The full text of the licences can be found in the files \s-1GPL2\s0.txt and \s-1ARTISTIC\s0.txt, respectively.
.SH "HATS"
.IX Header "HATS"
I recommend buying a Fedora from <http://hatsdirect.com/>.
.SH "CONSPIRACY"
.IX Header "CONSPIRACY"
This module is also free-as-in-mason software.

.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::Request::Upload 3"
.TH Catalyst::Request::Upload 3 "2014-09-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Request::Upload \- handles file upload requests
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $upload = $c\->req\->upload(\*(Aqfield\*(Aq);
\&
\&    $upload\->basename;
\&    $upload\->copy_to;
\&    $upload\->fh;
\&    $upload\->filename;
\&    $upload\->headers;
\&    $upload\->link_to;
\&    $upload\->size;
\&    $upload\->slurp;
\&    $upload\->tempname;
\&    $upload\->type;
.Ve
.PP
To specify where Catalyst should put the temporary files, set the 'uploadtmp'
option in the Catalyst config. If unset, Catalyst will use the system temp dir.
.PP
.Vb 1
\&    _\|_PACKAGE_\|_\->config( uploadtmp => \*(Aq/path/to/tmpdir\*(Aq );
.Ve
.PP
See also Catalyst.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides accessors and methods to handle client upload requests.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$upload\->new"
.el .SS "\f(CW$upload\fP\->new"
.IX Subsection "$upload->new"
Simple constructor.
.ie n .SS "$upload\->copy_to"
.el .SS "\f(CW$upload\fP\->copy_to"
.IX Subsection "$upload->copy_to"
Copies the temporary file using File::Copy. Returns true for success,
false for failure.
.PP
.Vb 1
\&     $upload\->copy_to(\*(Aq/path/to/target\*(Aq);
.Ve
.ie n .SS "$upload\->fh"
.el .SS "\f(CW$upload\fP\->fh"
.IX Subsection "$upload->fh"
Opens a temporary file (see tempname below) and returns an IO::File handle.
.ie n .SS "$upload\->filename"
.el .SS "\f(CW$upload\fP\->filename"
.IX Subsection "$upload->filename"
Returns the client-supplied filename.
.ie n .SS "$upload\->headers"
.el .SS "\f(CW$upload\fP\->headers"
.IX Subsection "$upload->headers"
Returns an HTTP::Headers object for the request.
.ie n .SS "$upload\->link_to"
.el .SS "\f(CW$upload\fP\->link_to"
.IX Subsection "$upload->link_to"
Creates a hard link to the temporary file. Returns true for success,
false for failure.
.PP
.Vb 1
\&    $upload\->link_to(\*(Aq/path/to/target\*(Aq);
.Ve
.ie n .SS "$upload\->size"
.el .SS "\f(CW$upload\fP\->size"
.IX Subsection "$upload->size"
Returns the size of the uploaded file in bytes.
.ie n .SS "$upload\->slurp"
.el .SS "\f(CW$upload\fP\->slurp"
.IX Subsection "$upload->slurp"
Returns a scalar containing the contents of the temporary file.
.PP
Note that this will cause the filehandle pointed to by \f(CW\*(C`$upload\->fh\*(C'\fR to
be reset to the start of the file using seek and the file handle to be put
into binary mode.
.ie n .SS "$upload\->basename"
.el .SS "\f(CW$upload\fP\->basename"
.IX Subsection "$upload->basename"
Returns basename for \f(CW\*(C`filename\*(C'\fR.
.ie n .SS "$upload\->tempname"
.el .SS "\f(CW$upload\fP\->tempname"
.IX Subsection "$upload->tempname"
Returns the path to the temporary file.
.ie n .SS "$upload\->type"
.el .SS "\f(CW$upload\fP\->type"
.IX Subsection "$upload->type"
Returns the client-supplied Content-Type.
.SS "meta"
.IX Subsection "meta"
Provided by Moose
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.

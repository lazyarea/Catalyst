.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Catalyst::Controller 3"
.TH Catalyst::Controller 3 "2014-09-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Controller \- Catalyst Controller base class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package MyApp::Controller::Search
\&  use base qw/Catalyst::Controller/;
\&
\&  sub foo : Local {
\&    my ($self,$c,@args) = @_;
\&    ...
\&  } # Dispatches to /search/foo
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Controllers are where the actions in the Catalyst framework
reside. Each action is represented by a function with an attribute to
identify what kind of action it is. See the Catalyst::Dispatcher
for more info about how Catalyst dispatches to actions.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
Like any other Catalyst::Component, controllers have a config hash,
accessible through \f(CW$self\fR\->config from the controller actions.  Some
settings are in use by the Catalyst framework:
.SS "namespace"
.IX Subsection "namespace"
This specifies the internal namespace the controller should be bound
to. By default the controller is bound to the \s-1URI\s0 version of the
controller name. For instance controller 'MyApp::Controller::Foo::Bar'
will be bound to 'foo/bar'. The default Root controller is an example
of setting namespace to '' (the null string).
.SS "path"
.IX Subsection "path"
Sets 'path_prefix', as described below.
.SS "action"
.IX Subsection "action"
Allows you to set the attributes that the dispatcher creates actions out of.
This allows you to do 'rails style routes', or override some of the
attribute definitions of actions composed from Roles.
You can set arguments globally (for all actions of the controller) and
specifically (for a single action).
.PP
.Vb 6
\&    _\|_PACKAGE_\|_\->config(
\&        action => {
\&            \*(Aq*\*(Aq => { Chained => \*(Aqbase\*(Aq, Args => 0  },
\&            base => { Chained => \*(Aq/\*(Aq, PathPart => \*(Aq\*(Aq, CaptureArgs => 0 },
\&        },
\&     );
.Ve
.PP
In the case above every sub in the package would be made into a Chain
endpoint with a \s-1URI\s0 the same as the sub name for each sub, chained
to the sub named \f(CW\*(C`base\*(C'\fR. Ergo dispatch to \f(CW\*(C`/example\*(C'\fR would call the
\&\f(CW\*(C`base\*(C'\fR method, then the \f(CW\*(C`example\*(C'\fR method.
.SS "action_args"
.IX Subsection "action_args"
Allows you to set constructor arguments on your actions. You can set arguments
globally and specifically (as above).
This is particularly useful when using \f(CW\*(C`ActionRole\*(C'\fRs
(Catalyst::Controller::ActionRole) and custom \f(CW\*(C`ActionClass\*(C'\fRes.
.PP
.Vb 6
\&    _\|_PACKAGE_\|_\->config(
\&        action_args => {
\&            \*(Aq*\*(Aq => { globalarg1 => \*(Aqhello\*(Aq, globalarg2 => \*(Aqgoodbye\*(Aq },
\&            \*(Aqspecific_action\*(Aq => { customarg => \*(Aqarg1\*(Aq },
\&        },
\&     );
.Ve
.PP
In the case above the action class associated with \f(CW\*(C`specific_action\*(C'\fR would get
passed the following arguments, in addition to the normal action constructor
arguments, when it is instantiated:
.PP
.Vb 1
\&  (globalarg1 => \*(Aqhello\*(Aq, globalarg2 => \*(Aqgoodbye\*(Aq, customarg => \*(Aqarg1\*(Aq)
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "\s-1BUILDARGS\s0 ($app, @args)"
.el .SS "\s-1BUILDARGS\s0 ($app, \f(CW@args\fP)"
.IX Subsection "BUILDARGS ($app, @args)"
From Catalyst::Component::ApplicationAttribute, stashes the application
instance as \f(CW$self\fR\->_application.
.ie n .SS "$self\->action_for('name')"
.el .SS "\f(CW$self\fP\->action_for('name')"
.IX Subsection "$self->action_for('name')"
Returns the Catalyst::Action object (if any) for a given method name
in this component.
.ie n .SS "$self\->action_namespace($c)"
.el .SS "\f(CW$self\fP\->action_namespace($c)"
.IX Subsection "$self->action_namespace($c)"
Returns the private namespace for actions in this component. Defaults
to a value from the controller name (for
e.g. MyApp::Controller::Foo::Bar becomes \*(L"foo/bar\*(R") or can be
overridden from the \*(L"namespace\*(R" config key.
.ie n .SS "$self\->path_prefix($c)"
.el .SS "\f(CW$self\fP\->path_prefix($c)"
.IX Subsection "$self->path_prefix($c)"
Returns the default path prefix for :PathPrefix, :Local and
relative :Path actions in this component. Defaults to the action_namespace or
can be overridden from the \*(L"path\*(R" config key.
.ie n .SS "$self\->register_actions($c)"
.el .SS "\f(CW$self\fP\->register_actions($c)"
.IX Subsection "$self->register_actions($c)"
Finds all applicable actions for this component, creates
Catalyst::Action objects (using \f(CW$self\fR\->create_action) for them and
registers them with \f(CW$c\fR\->dispatcher.
.ie n .SS "$self\->\fIget_action_methods()\fP"
.el .SS "\f(CW$self\fP\->\fIget_action_methods()\fP"
.IX Subsection "$self->get_action_methods()"
Returns a list of Moose::Meta::Method objects, doing the
MooseX::MethodAttributes::Role::Meta::Method role, which are the set of
action methods for this package.
.ie n .SS "$self\->register_action_methods($c, @methods)"
.el .SS "\f(CW$self\fP\->register_action_methods($c, \f(CW@methods\fP)"
.IX Subsection "$self->register_action_methods($c, @methods)"
Creates action objects for a set of action methods using \f(CW\*(C` create_action \*(C'\fR,
and registers them with the dispatcher.
.ie n .SS "$self\->action_class(%args)"
.el .SS "\f(CW$self\fP\->action_class(%args)"
.IX Subsection "$self->action_class(%args)"
Used when a controller is creating an action to determine the correct base
action class to use.
.ie n .SS "$self\->create_action(%args)"
.el .SS "\f(CW$self\fP\->create_action(%args)"
.IX Subsection "$self->create_action(%args)"
Called with a hash of data to be use for construction of a new
Catalyst::Action (or appropriate sub/alternative class) object.
.ie n .SS "$self\->gather_action_roles(\e%action_args)"
.el .SS "\f(CW$self\fP\->gather_action_roles(\e%action_args)"
.IX Subsection "$self->gather_action_roles(%action_args)"
Gathers the list of roles to apply to an action with the given \f(CW%action_args\fR.
.ie n .SS "$self\->gather_default_action_roles(\e%action_args)"
.el .SS "\f(CW$self\fP\->gather_default_action_roles(\e%action_args)"
.IX Subsection "$self->gather_default_action_roles(%action_args)"
returns a list of action roles to be applied based on core, builtin rules.
Currently only the Catalyst::ActionRole::HTTPMethods role is applied
this way.
.ie n .SS "$self\->_application"
.el .SS "\f(CW$self\fP\->_application"
.IX Subsection "$self->_application"
.ie n .SS "$self\->_app"
.el .SS "\f(CW$self\fP\->_app"
.IX Subsection "$self->_app"
Returns the application instance stored by \f(CW\*(C`new()\*(C'\fR
.SH "ACTION SUBROUTINE ATTRIBUTES"
.IX Header "ACTION SUBROUTINE ATTRIBUTES"
Please see Catalyst::Manual::Intro for more details
.PP
Think of action attributes as a sort of way to record metadata about an action,
similar to how annotations work in other languages you might have heard of.
Generally Catalyst uses these to influence how the dispatcher sees your
action and when it will run it in response to an incoming request.  They can
also be used for other things.  Here's a summary, but you should refer to the
linked manual page for additional help.
.SS "Global"
.IX Subsection "Global"
.Vb 1
\&  sub homepage :Global { ... }
.Ve
.PP
A global action defined in any controller always runs relative to your root.
So the above is the same as:
.PP
.Vb 1
\&  sub myaction :Path("/homepage") { ... }
.Ve
.SS "Absolute"
.IX Subsection "Absolute"
Status: Deprecated alias to \*(L"Global\*(R".
.SS "Local"
.IX Subsection "Local"
Alias to \*(L"Path(\*(R"$action_name").  The following two actions are the same:
.PP
.Vb 2
\&  sub myaction :Local { ... }
\&  sub myaction :Path(\*(Aqmyaction\*(Aq) { ... }
.Ve
.SS "Relative"
.IX Subsection "Relative"
Status: Deprecated alias to \*(L"Local\*(R"
.SS "Path"
.IX Subsection "Path"
Handle various types of paths:
.PP
.Vb 1
\&  package MyApp::Controller::Baz {
\&
\&    ...
\&
\&    sub myaction1 :Path { ... }  # \-> /baz
\&    sub myaction2 :Path(\*(Aqfoo\*(Aq) { ... } # \-> /baz/foo
\&    sub myaction2 :Path(\*(Aq/bar\*(Aq) { ... } # \-> /bar
\&  }
.Ve
.PP
This is a general toolbox for attaching your action to a given path.
.SS "Regex"
.IX Subsection "Regex"
.SS "Regexp"
.IX Subsection "Regexp"
\&\fBStatus: Deprecated.\fR  Use Chained methods or other techniques.
If you really depend on this, install the standalone 
Catalyst::DispatchType::Regex distribution.
.PP
A global way to match a give regular expression in the incoming request path.
.SS "LocalRegex"
.IX Subsection "LocalRegex"
.SS "LocalRegexp"
.IX Subsection "LocalRegexp"
\&\fBStatus: Deprecated.\fR  Use Chained methods or other techniques.
If you really depend on this, install the standalone 
Catalyst::DispatchType::Regex distribution.
.PP
Like \*(L"Regex\*(R" but scoped under the namespace of the containing controller
.SS "Chained"
.IX Subsection "Chained"
.SS "ChainedParent"
.IX Subsection "ChainedParent"
.SS "PathPrefix"
.IX Subsection "PathPrefix"
.SS "PathPart"
.IX Subsection "PathPart"
.SS "CaptureArgs"
.IX Subsection "CaptureArgs"
Please see Catalyst::DispatchType::Chained
.SS "ActionClass"
.IX Subsection "ActionClass"
Set the base class for the action, defaults to \*(L"Catalyst::Action\*(R".  It is now
preferred to use \*(L"Does\*(R".
.SS "MyAction"
.IX Subsection "MyAction"
Set the ActionClass using a custom Action in your project namespace.
.PP
The following is exactly the same:
.PP
.Vb 2
\&    sub foo_action1 : Local ActionClass(\*(Aq+MyApp::Action::Bar\*(Aq) { ... }
\&    sub foo_action2 : Local MyAction(\*(AqBar\*(Aq) { ... }
.Ve
.SS "Does"
.IX Subsection "Does"
.Vb 1
\&    package MyApp::Controller::Zoo;
\&
\&    sub foo  : Local Does(\*(AqMoo\*(Aq)  { ... } # Catalyst::ActionRole::
\&    sub bar  : Local Does(\*(Aq~Moo\*(Aq) { ... } # MyApp::ActionRole::Moo
\&    sub baz  : Local Does(\*(Aq+MyApp::ActionRole::Moo\*(Aq) { ... }
.Ve
.SS "\s-1GET\s0"
.IX Subsection "GET"
.SS "\s-1POST\s0"
.IX Subsection "POST"
.SS "\s-1PUT\s0"
.IX Subsection "PUT"
.SS "\s-1DELETE\s0"
.IX Subsection "DELETE"
.SS "\s-1OPTION\s0"
.IX Subsection "OPTION"
.SS "\s-1HEAD\s0"
.IX Subsection "HEAD"
.SS "\s-1PATCH\s0"
.IX Subsection "PATCH"
.SS "Method('...')"
.IX Subsection "Method('...')"
Sets the give action path to match the specified \s-1HTTP\s0 method, or via one of the
broadly accepted methods of overriding the 'true' method (see
Catalyst::ActionRole::HTTPMethods).
.SS "Args"
.IX Subsection "Args"
When used with \*(L"Path\*(R" indicates the number of arguments expected in
the path.  However if no Args value is set, assumed to 'slurp' all
remaining path pars under this namespace.
.SS "Consumes('...')"
.IX Subsection "Consumes('...')"
Matches the current action against the content-type of the request.  Typically
this is used when the request is a \s-1POST\s0 or \s-1PUT\s0 and you want to restrict the
submitted content type.  For example, you might have an \s-1HTML\s0 for that either
returns classic url encoded form data, or \s-1JSON\s0 when Javascript is enabled.  In
this case you may wish to match either incoming type to one of two different
actions, for properly processing.
.PP
Examples:
.PP
.Vb 3
\&    sub is_json       : Chained(\*(Aqstart\*(Aq) Consumes(\*(Aqapplication/json\*(Aq) { ... }
\&    sub is_urlencoded : Chained(\*(Aqstart\*(Aq) Consumes(\*(Aqapplication/x\-www\-form\-urlencoded\*(Aq) { ... }
\&    sub is_multipart  : Chained(\*(Aqstart\*(Aq) Consumes(\*(Aqmultipart/form\-data\*(Aq) { ... }
.Ve
.PP
To reduce boilerplate, we include the following content type shortcuts:
.PP
Examples
.PP
.Vb 3
\&      sub is_json       : Chained(\*(Aqstart\*(Aq) Consume(JSON) { ... }
\&      sub is_urlencoded : Chained(\*(Aqstart\*(Aq) Consumes(UrlEncoded) { ... }
\&      sub is_multipart  : Chained(\*(Aqstart\*(Aq) Consumes(Multipart) { ... }
.Ve
.PP
You may specify more than one match:
.PP
.Vb 4
\&      sub is_more_than_one
\&        : Chained(\*(Aqstart\*(Aq)
\&        : Consumes(\*(Aqapplication/x\-www\-form\-urlencoded\*(Aq)
\&        : Consumes(\*(Aqmultipart/form\-data\*(Aq)
\&
\&      sub is_more_than_one
\&        : Chained(\*(Aqstart\*(Aq)
\&        : Consumes(UrlEncoded)
\&        : Consumes(Multipart)
.Ve
.PP
Since it is a common case the shortcut \f(CW\*(C`HTMLForm\*(C'\fR matches both
\&'application/x\-www\-form\-urlencoded' and 'multipart/form\-data'.  Here's the full
list of available shortcuts:
.PP
.Vb 9
\&    JSON => \*(Aqapplication/json\*(Aq,
\&    JS => \*(Aqapplication/javascript\*(Aq,
\&    PERL => \*(Aqapplication/perl\*(Aq,
\&    HTML => \*(Aqtext/html\*(Aq,
\&    XML => \*(Aqtext/XML\*(Aq,
\&    Plain => \*(Aqtext/plain\*(Aq,
\&    UrlEncoded => \*(Aqapplication/x\-www\-form\-urlencoded\*(Aq,
\&    Multipart => \*(Aqmultipart/form\-data\*(Aq,
\&    HTMLForm => [\*(Aqapplication/x\-www\-form\-urlencoded\*(Aq,\*(Aqmultipart/form\-data\*(Aq],
.Ve
.PP
Please keep in mind that when dispatching, Catalyst will match the first most
relevant case, so if you use the \f(CW\*(C`Consumes\*(C'\fR attribute, you should place your
most accurate matches early in the Chain, and your 'catchall' actions last.
.PP
See Catalyst::ActionRole::ConsumesContent for more.
.SH "OPTIONAL METHODS"
.IX Header "OPTIONAL METHODS"
.SS "_parse_[$name]_attr"
.IX Subsection "_parse_[$name]_attr"
Allows you to customize parsing of subroutine attributes.
.PP
.Vb 1
\&    sub myaction1 :Path TwoArgs { ... }
\&
\&    sub _parse_TwoArgs_attr {
\&      my ( $self, $c, $name, $value ) = @_;
\&      # $self \-> controller instance
\&      #
\&      return(Args => 2);
\&    }
.Ve
.PP
Please note that this feature does not let you actually assign new functions
to actions via subroutine attributes, but is really more for creating useful
aliases to existing core and extended attributes, and transforms based on 
existing information (like from configuration).  Code for actually doing
something meaningful with the subroutine attributes will be located in the
Catalyst::Action classes (or your subclasses), Catalyst::Dispatcher and
in subclasses of Catalyst::DispatchType.  Remember these methods only get
called basically once when the application is starting, not per request!
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.

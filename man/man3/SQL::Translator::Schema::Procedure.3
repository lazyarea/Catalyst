.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Schema::Procedure 3"
.TH SQL::Translator::Schema::Procedure 3 "2014-06-28" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Translator::Schema::Procedure \- SQL::Translator procedure object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&  use SQL::Translator::Schema::Procedure;
\&  my $procedure  = SQL::Translator::Schema::Procedure\->new(
\&      name       => \*(Aqfoo\*(Aq,
\&      sql        => \*(AqCREATE PROC foo AS SELECT * FROM bar\*(Aq,
\&      parameters => \*(Aqfoo,bar\*(Aq,
\&      owner      => \*(Aqnomar\*(Aq,
\&      comments   => \*(Aqblah blah blah\*(Aq,
\&      schema     => $schema,
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`SQL::Translator::Schema::Procedure\*(C'\fR is a class for dealing with
stored procedures (and possibly other pieces of nameable \s-1SQL\s0 code?).
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Object constructor.
.PP
.Vb 1
\&  my $schema = SQL::Translator::Schema::Procedure\->new;
.Ve
.SS "parameters"
.IX Subsection "parameters"
Gets and set the parameters of the stored procedure.
.PP
.Vb 5
\&  $procedure\->parameters(\*(Aqid\*(Aq);
\&  $procedure\->parameters(\*(Aqid\*(Aq, \*(Aqname\*(Aq);
\&  $procedure\->parameters( \*(Aqid, name\*(Aq );
\&  $procedure\->parameters( [ \*(Aqid\*(Aq, \*(Aqname\*(Aq ] );
\&  $procedure\->parameters( qw[ id name ] );
\&
\&  my @parameters = $procedure\->parameters;
.Ve
.SS "name"
.IX Subsection "name"
Get or set the procedure's name.
.PP
.Vb 2
\&  $procedure\->name(\*(Aqfoo\*(Aq);
\&  my $name = $procedure\->name;
.Ve
.SS "sql"
.IX Subsection "sql"
Get or set the procedure's \s-1SQL\s0.
.PP
.Vb 2
\&  $procedure\->sql(\*(Aqselect * from foo\*(Aq);
\&  my $sql = $procedure\->sql;
.Ve
.SS "order"
.IX Subsection "order"
Get or set the order of the procedure.
.PP
.Vb 2
\&  $procedure\->order( 3 );
\&  my $order = $procedure\->order;
.Ve
.SS "owner"
.IX Subsection "owner"
Get or set the owner of the procedure.
.PP
.Vb 2
\&  $procedure\->owner(\*(Aqnomar\*(Aq);
\&  my $sql = $procedure\->owner;
.Ve
.SS "comments"
.IX Subsection "comments"
Get or set the comments on a procedure.
.PP
.Vb 3
\&  $procedure\->comments(\*(Aqfoo\*(Aq);
\&  $procedure\->comments(\*(Aqbar\*(Aq);
\&  print join( \*(Aq, \*(Aq, $procedure\->comments ); # prints "foo, bar"
.Ve
.SS "schema"
.IX Subsection "schema"
Get or set the procedures's schema object.
.PP
.Vb 2
\&  $procedure\->schema( $schema );
\&  my $schema = $procedure\->schema;
.Ve
.SS "equals"
.IX Subsection "equals"
Determines if this procedure is the same as another
.PP
.Vb 1
\&  my $isIdentical = $procedure1\->equals( $procedure2 );
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Ken Youens-Clark <kclark@cshl.org>,
Paul Harrington <Paul\-Harrington@deshaw.com>.

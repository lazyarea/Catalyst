.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "PWHICH 1"
.TH PWHICH 1 "2009-09-27" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pwhich \- Perl\-only `which'
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  $ pwhich perl
\&  $ pwhich \-a perl          # print all matches
\&  $ pwhich perl perldoc ... # look for multiple programs
\&  $ pwhich \-a perl perldoc ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
`pwhich' is a command-line utility program for finding paths to other
programs based on the user's \f(CW\*(C`PATH\*(C'\fR. It is similar to the usualy Unix
tool `which', and tries to emulate its functionality, but is written
purely in Perl (uses the module \f(CW\*(C`File::Which\*(C'\fR), so is portable.
.SS "Calling syntax"
.IX Subsection "Calling syntax"
.Vb 1
\&  $ pwhich [\-a] [\-v] programname [programname ...]
.Ve
.SS "Options"
.IX Subsection "Options"
.IP "\-a" 4
.IX Item "-a"
The option \fI\-a\fR will make \f(CW\*(C`pwhich\*(C'\fR print all matches found in the
\&\f(CW\*(C`PATH\*(C'\fR variable instead of just the first one. Each match is printed
on a separate line.
.IP "\-v" 4
.IX Item "-v"
Prints version (of \f(CW\*(C`File::Which\*(C'\fR) and copyright notice and exits.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs should be reported via the \s-1CPAN\s0 bug tracker at
.PP
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=File\-Which <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=File-Which>
.PP
For other issues, contact the maintainer.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.PP
Per Einar Ellefsen <pereinar@cpan.org>
.PP
Originated in \fImodperl\-2.0/lib/Apache/Build.pm\fR. Changed for use in DocSet
(for the mod_perl site) and Win32\-awareness by me, with slight modifications
by Stas Bekman, then extracted to create \f(CW\*(C`File::Which\*(C'\fR.
.PP
Version 0.04 had some significant platform-related changes, taken from
the Perl Power Tools \f(CW\`which\*(Aq\fR implementation by Abigail with
enhancements from Peter Prymmer. See
<http://www.perl.com/language/ppt/src/which/index.html> for more
information.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2002 Per Einar Ellefsen.
.PP
Some parts copyright 2009 Adam Kennedy.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, File::Which, \fIwhich\fR\|(1)
